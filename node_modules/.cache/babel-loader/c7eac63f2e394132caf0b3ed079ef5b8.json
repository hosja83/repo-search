{"ast":null,"code":"import { getUserAgent } from 'universal-user-agent';\nimport { request } from '@octokit/request';\nimport btoa from 'btoa-lite';\nimport { createOAuthUserAuth, requiresBasicAuth } from '@octokit/auth-oauth-user';\nexport { createOAuthUserAuth } from '@octokit/auth-oauth-user';\n\nasync function auth(state, authOptions) {\n  if (authOptions.type === \"oauth-app\") {\n    return {\n      type: \"oauth-app\",\n      clientId: state.clientId,\n      clientSecret: state.clientSecret,\n      clientType: state.clientType,\n      headers: {\n        authorization: `basic ${btoa(`${state.clientId}:${state.clientSecret}`)}`\n      }\n    };\n  }\n\n  if (\"factory\" in authOptions) {\n    const {\n      type,\n      ...options\n    } = { ...authOptions,\n      ...state\n    }; // @ts-expect-error TODO: `option` cannot be never, is this a bug?\n\n    return authOptions.factory(options);\n  }\n\n  const common = {\n    clientId: state.clientId,\n    clientSecret: state.clientSecret,\n    request: state.request,\n    ...authOptions\n  }; // TS: Look what you made me do\n\n  const userAuth = state.clientType === \"oauth-app\" ? await createOAuthUserAuth({ ...common,\n    clientType: state.clientType\n  }) : await createOAuthUserAuth({ ...common,\n    clientType: state.clientType\n  });\n  return userAuth();\n}\n\nasync function hook(state, request, route, parameters) {\n  let endpoint = request.endpoint.merge(route, parameters); // Do not intercept OAuth Web/Device flow request\n\n  if (/\\/login\\/(oauth\\/access_token|device\\/code)$/.test(endpoint.url)) {\n    return request(endpoint);\n  }\n\n  if (state.clientType === \"github-app\" && !requiresBasicAuth(endpoint.url)) {\n    throw new Error(`[@octokit/auth-oauth-app] GitHub Apps cannot use their client ID/secret for basic authentication for endpoints other than \"/applications/{client_id}/**\". \"${endpoint.method} ${endpoint.url}\" is not supported.`);\n  }\n\n  const credentials = btoa(`${state.clientId}:${state.clientSecret}`);\n  endpoint.headers.authorization = `basic ${credentials}`;\n\n  try {\n    return await request(endpoint);\n  } catch (error) {\n    /* istanbul ignore if */\n    if (error.status !== 401) throw error;\n    error.message = `[@octokit/auth-oauth-app] \"${endpoint.method} ${endpoint.url}\" does not support clientId/clientSecret basic authentication.`;\n    throw error;\n  }\n}\n\nconst VERSION = \"5.0.1\";\n\nfunction createOAuthAppAuth(options) {\n  const state = Object.assign({\n    request: request.defaults({\n      headers: {\n        \"user-agent\": `octokit-auth-oauth-app.js/${VERSION} ${getUserAgent()}`\n      }\n    }),\n    clientType: \"oauth-app\"\n  }, options); // @ts-expect-error not worth the extra code to appease TS\n\n  return Object.assign(auth.bind(null, state), {\n    hook: hook.bind(null, state)\n  });\n}\n\nexport { createOAuthAppAuth };","map":{"version":3,"mappings":"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","names":["auth","state","authOptions","type","clientId","clientSecret","clientType","headers","authorization","btoa","options","factory","common","request","userAuth","createOAuthUserAuth","hook","route","parameters","endpoint","merge","test","url","requiresBasicAuth","Error","method","credentials","error","status","message","VERSION","createOAuthAppAuth","Object","assign","defaults","getUserAgent","bind"],"sources":["/home/hosainy/documents/oden-project/repos/sas-interview-assignment/node_modules/@octokit/auth-oauth-app/dist-src/auth.js","/home/hosainy/documents/oden-project/repos/sas-interview-assignment/node_modules/@octokit/auth-oauth-app/dist-src/hook.js","/home/hosainy/documents/oden-project/repos/sas-interview-assignment/node_modules/@octokit/auth-oauth-app/dist-src/version.js","/home/hosainy/documents/oden-project/repos/sas-interview-assignment/node_modules/@octokit/auth-oauth-app/dist-src/index.js"],"sourcesContent":["import btoa from \"btoa-lite\";\nimport { createOAuthUserAuth } from \"@octokit/auth-oauth-user\";\nexport async function auth(state, authOptions) {\n    if (authOptions.type === \"oauth-app\") {\n        return {\n            type: \"oauth-app\",\n            clientId: state.clientId,\n            clientSecret: state.clientSecret,\n            clientType: state.clientType,\n            headers: {\n                authorization: `basic ${btoa(`${state.clientId}:${state.clientSecret}`)}`,\n            },\n        };\n    }\n    if (\"factory\" in authOptions) {\n        const { type, ...options } = {\n            ...authOptions,\n            ...state,\n        };\n        // @ts-expect-error TODO: `option` cannot be never, is this a bug?\n        return authOptions.factory(options);\n    }\n    const common = {\n        clientId: state.clientId,\n        clientSecret: state.clientSecret,\n        request: state.request,\n        ...authOptions,\n    };\n    // TS: Look what you made me do\n    const userAuth = state.clientType === \"oauth-app\"\n        ? await createOAuthUserAuth({\n            ...common,\n            clientType: state.clientType,\n        })\n        : await createOAuthUserAuth({\n            ...common,\n            clientType: state.clientType,\n        });\n    return userAuth();\n}\n","import btoa from \"btoa-lite\";\nimport { requiresBasicAuth } from \"@octokit/auth-oauth-user\";\nexport async function hook(state, request, route, parameters) {\n    let endpoint = request.endpoint.merge(route, parameters);\n    // Do not intercept OAuth Web/Device flow request\n    if (/\\/login\\/(oauth\\/access_token|device\\/code)$/.test(endpoint.url)) {\n        return request(endpoint);\n    }\n    if (state.clientType === \"github-app\" && !requiresBasicAuth(endpoint.url)) {\n        throw new Error(`[@octokit/auth-oauth-app] GitHub Apps cannot use their client ID/secret for basic authentication for endpoints other than \"/applications/{client_id}/**\". \"${endpoint.method} ${endpoint.url}\" is not supported.`);\n    }\n    const credentials = btoa(`${state.clientId}:${state.clientSecret}`);\n    endpoint.headers.authorization = `basic ${credentials}`;\n    try {\n        return await request(endpoint);\n    }\n    catch (error) {\n        /* istanbul ignore if */\n        if (error.status !== 401)\n            throw error;\n        error.message = `[@octokit/auth-oauth-app] \"${endpoint.method} ${endpoint.url}\" does not support clientId/clientSecret basic authentication.`;\n        throw error;\n    }\n}\n","export const VERSION = \"5.0.1\";\n","import { getUserAgent } from \"universal-user-agent\";\nimport { request } from \"@octokit/request\";\nimport { auth } from \"./auth\";\nimport { hook } from \"./hook\";\nimport { VERSION } from \"./version\";\nexport { createOAuthUserAuth } from \"@octokit/auth-oauth-user\";\nexport function createOAuthAppAuth(options) {\n    const state = Object.assign({\n        request: request.defaults({\n            headers: {\n                \"user-agent\": `octokit-auth-oauth-app.js/${VERSION} ${getUserAgent()}`,\n            },\n        }),\n        clientType: \"oauth-app\",\n    }, options);\n    // @ts-expect-error not worth the extra code to appease TS\n    return Object.assign(auth.bind(null, state), {\n        hook: hook.bind(null, state),\n    });\n}\n"]},"metadata":{},"sourceType":"module"}