{"ast":null,"code":"import { getUserAgent } from 'universal-user-agent';\nimport { request } from '@octokit/request';\nimport { createDeviceCode, exchangeDeviceCode } from '@octokit/oauth-methods';\n\nasync function getOAuthAccessToken(state, options) {\n  const cachedAuthentication = getCachedAuthentication(state, options.auth);\n  if (cachedAuthentication) return cachedAuthentication; // Step 1: Request device and user codes\n  // https://docs.github.com/en/developers/apps/authorizing-oauth-apps#step-1-app-requests-the-device-and-user-verification-codes-from-github\n\n  const {\n    data: verification\n  } = await createDeviceCode({\n    clientType: state.clientType,\n    clientId: state.clientId,\n    request: options.request || state.request,\n    // @ts-expect-error the extra code to make TS happy is not worth it\n    scopes: options.auth.scopes || state.scopes\n  }); // Step 2: User must enter the user code on https://github.com/login/device\n  // See https://docs.github.com/en/developers/apps/authorizing-oauth-apps#step-2-prompt-the-user-to-enter-the-user-code-in-a-browser\n\n  await state.onVerification(verification); // Step 3: Exchange device code for access token\n  // See https://docs.github.com/en/developers/apps/authorizing-oauth-apps#step-3-app-polls-github-to-check-if-the-user-authorized-the-device\n\n  const authentication = await waitForAccessToken(options.request || state.request, state.clientId, state.clientType, verification);\n  state.authentication = authentication;\n  return authentication;\n}\n\nfunction getCachedAuthentication(state, auth) {\n  if (auth.refresh === true) return false;\n  if (!state.authentication) return false;\n\n  if (state.clientType === \"github-app\") {\n    return state.authentication;\n  }\n\n  const authentication = state.authentication;\n  const newScope = (\"scopes\" in auth && auth.scopes || state.scopes).join(\" \");\n  const currentScope = authentication.scopes.join(\" \");\n  return newScope === currentScope ? authentication : false;\n}\n\nasync function wait(seconds) {\n  await new Promise(resolve => setTimeout(resolve, seconds * 1000));\n}\n\nasync function waitForAccessToken(request, clientId, clientType, verification) {\n  try {\n    const options = {\n      clientId,\n      request,\n      code: verification.device_code\n    }; // WHY TYPESCRIPT WHY ARE YOU DOING THIS TO ME\n\n    const {\n      authentication\n    } = clientType === \"oauth-app\" ? await exchangeDeviceCode({ ...options,\n      clientType: \"oauth-app\"\n    }) : await exchangeDeviceCode({ ...options,\n      clientType: \"github-app\"\n    });\n    return {\n      type: \"token\",\n      tokenType: \"oauth\",\n      ...authentication\n    };\n  } catch (error) {\n    // istanbul ignore if\n    if (!error.response) throw error;\n    const errorType = error.response.data.error;\n\n    if (errorType === \"authorization_pending\") {\n      await wait(verification.interval);\n      return waitForAccessToken(request, clientId, clientType, verification);\n    }\n\n    if (errorType === \"slow_down\") {\n      await wait(verification.interval + 5);\n      return waitForAccessToken(request, clientId, clientType, verification);\n    }\n\n    throw error;\n  }\n}\n\nasync function auth(state, authOptions) {\n  return getOAuthAccessToken(state, {\n    auth: authOptions\n  });\n}\n\nasync function hook(state, request, route, parameters) {\n  let endpoint = request.endpoint.merge(route, parameters); // Do not intercept request to retrieve codes or token\n\n  if (/\\/login\\/(oauth\\/access_token|device\\/code)$/.test(endpoint.url)) {\n    return request(endpoint);\n  }\n\n  const {\n    token\n  } = await getOAuthAccessToken(state, {\n    request,\n    auth: {\n      type: \"oauth\"\n    }\n  });\n  endpoint.headers.authorization = `token ${token}`;\n  return request(endpoint);\n}\n\nconst VERSION = \"4.0.0\";\n\nfunction createOAuthDeviceAuth(options) {\n  const requestWithDefaults = options.request || request.defaults({\n    headers: {\n      \"user-agent\": `octokit-auth-oauth-device.js/${VERSION} ${getUserAgent()}`\n    }\n  });\n  const {\n    request: request$1 = requestWithDefaults,\n    ...otherOptions\n  } = options;\n  const state = options.clientType === \"github-app\" ? { ...otherOptions,\n    clientType: \"github-app\",\n    request: request$1\n  } : { ...otherOptions,\n    clientType: \"oauth-app\",\n    request: request$1,\n    scopes: options.scopes || []\n  };\n\n  if (!options.clientId) {\n    throw new Error('[@octokit/auth-oauth-device] \"clientId\" option must be set (https://github.com/octokit/auth-oauth-device.js#usage)');\n  }\n\n  if (!options.onVerification) {\n    throw new Error('[@octokit/auth-oauth-device] \"onVerification\" option must be a function (https://github.com/octokit/auth-oauth-device.js#usage)');\n  } // @ts-ignore too much for tsc / ts-jest ¯\\_(ツ)_/¯\n\n\n  return Object.assign(auth.bind(null, state), {\n    hook: hook.bind(null, state)\n  });\n}\n\nexport { createOAuthDeviceAuth };","map":{"version":3,"mappings":"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","names":["getOAuthAccessToken","state","options","cachedAuthentication","getCachedAuthentication","auth","data","verification","createDeviceCode","clientType","clientId","request","scopes","onVerification","authentication","waitForAccessToken","refresh","newScope","join","currentScope","wait","seconds","Promise","resolve","setTimeout","code","device_code","exchangeDeviceCode","type","tokenType","error","response","errorType","interval","authOptions","hook","route","parameters","endpoint","merge","test","url","token","headers","authorization","VERSION","createOAuthDeviceAuth","requestWithDefaults","octokitRequest","defaults","getUserAgent","otherOptions","Error","Object","assign","bind"],"sources":["/home/hosainy/documents/oden-project/repos/sas-interview-assignment/node_modules/@octokit/auth-oauth-device/dist-src/get-oauth-access-token.js","/home/hosainy/documents/oden-project/repos/sas-interview-assignment/node_modules/@octokit/auth-oauth-device/dist-src/auth.js","/home/hosainy/documents/oden-project/repos/sas-interview-assignment/node_modules/@octokit/auth-oauth-device/dist-src/hook.js","/home/hosainy/documents/oden-project/repos/sas-interview-assignment/node_modules/@octokit/auth-oauth-device/dist-src/version.js","/home/hosainy/documents/oden-project/repos/sas-interview-assignment/node_modules/@octokit/auth-oauth-device/dist-src/index.js"],"sourcesContent":["import { createDeviceCode, exchangeDeviceCode } from \"@octokit/oauth-methods\";\nexport async function getOAuthAccessToken(state, options) {\n    const cachedAuthentication = getCachedAuthentication(state, options.auth);\n    if (cachedAuthentication)\n        return cachedAuthentication;\n    // Step 1: Request device and user codes\n    // https://docs.github.com/en/developers/apps/authorizing-oauth-apps#step-1-app-requests-the-device-and-user-verification-codes-from-github\n    const { data: verification } = await createDeviceCode({\n        clientType: state.clientType,\n        clientId: state.clientId,\n        request: options.request || state.request,\n        // @ts-expect-error the extra code to make TS happy is not worth it\n        scopes: options.auth.scopes || state.scopes,\n    });\n    // Step 2: User must enter the user code on https://github.com/login/device\n    // See https://docs.github.com/en/developers/apps/authorizing-oauth-apps#step-2-prompt-the-user-to-enter-the-user-code-in-a-browser\n    await state.onVerification(verification);\n    // Step 3: Exchange device code for access token\n    // See https://docs.github.com/en/developers/apps/authorizing-oauth-apps#step-3-app-polls-github-to-check-if-the-user-authorized-the-device\n    const authentication = await waitForAccessToken(options.request || state.request, state.clientId, state.clientType, verification);\n    state.authentication = authentication;\n    return authentication;\n}\nfunction getCachedAuthentication(state, auth) {\n    if (auth.refresh === true)\n        return false;\n    if (!state.authentication)\n        return false;\n    if (state.clientType === \"github-app\") {\n        return state.authentication;\n    }\n    const authentication = state.authentication;\n    const newScope = ((\"scopes\" in auth && auth.scopes) || state.scopes).join(\" \");\n    const currentScope = authentication.scopes.join(\" \");\n    return newScope === currentScope ? authentication : false;\n}\nasync function wait(seconds) {\n    await new Promise((resolve) => setTimeout(resolve, seconds * 1000));\n}\nasync function waitForAccessToken(request, clientId, clientType, verification) {\n    try {\n        const options = {\n            clientId,\n            request,\n            code: verification.device_code,\n        };\n        // WHY TYPESCRIPT WHY ARE YOU DOING THIS TO ME\n        const { authentication } = clientType === \"oauth-app\"\n            ? await exchangeDeviceCode({\n                ...options,\n                clientType: \"oauth-app\",\n            })\n            : await exchangeDeviceCode({\n                ...options,\n                clientType: \"github-app\",\n            });\n        return {\n            type: \"token\",\n            tokenType: \"oauth\",\n            ...authentication,\n        };\n    }\n    catch (error) {\n        // istanbul ignore if\n        if (!error.response)\n            throw error;\n        const errorType = error.response.data.error;\n        if (errorType === \"authorization_pending\") {\n            await wait(verification.interval);\n            return waitForAccessToken(request, clientId, clientType, verification);\n        }\n        if (errorType === \"slow_down\") {\n            await wait(verification.interval + 5);\n            return waitForAccessToken(request, clientId, clientType, verification);\n        }\n        throw error;\n    }\n}\n","import { getOAuthAccessToken } from \"./get-oauth-access-token\";\nexport async function auth(state, authOptions) {\n    return getOAuthAccessToken(state, {\n        auth: authOptions,\n    });\n}\n","import { getOAuthAccessToken } from \"./get-oauth-access-token\";\nexport async function hook(state, request, route, parameters) {\n    let endpoint = request.endpoint.merge(route, parameters);\n    // Do not intercept request to retrieve codes or token\n    if (/\\/login\\/(oauth\\/access_token|device\\/code)$/.test(endpoint.url)) {\n        return request(endpoint);\n    }\n    const { token } = await getOAuthAccessToken(state, {\n        request,\n        auth: { type: \"oauth\" },\n    });\n    endpoint.headers.authorization = `token ${token}`;\n    return request(endpoint);\n}\n","export const VERSION = \"4.0.0\";\n","import { getUserAgent } from \"universal-user-agent\";\nimport { request as octokitRequest } from \"@octokit/request\";\nimport { auth } from \"./auth\";\nimport { hook } from \"./hook\";\nimport { VERSION } from \"./version\";\nexport function createOAuthDeviceAuth(options) {\n    const requestWithDefaults = options.request ||\n        octokitRequest.defaults({\n            headers: {\n                \"user-agent\": `octokit-auth-oauth-device.js/${VERSION} ${getUserAgent()}`,\n            },\n        });\n    const { request = requestWithDefaults, ...otherOptions } = options;\n    const state = options.clientType === \"github-app\"\n        ? {\n            ...otherOptions,\n            clientType: \"github-app\",\n            request,\n        }\n        : {\n            ...otherOptions,\n            clientType: \"oauth-app\",\n            request,\n            scopes: options.scopes || [],\n        };\n    if (!options.clientId) {\n        throw new Error('[@octokit/auth-oauth-device] \"clientId\" option must be set (https://github.com/octokit/auth-oauth-device.js#usage)');\n    }\n    if (!options.onVerification) {\n        throw new Error('[@octokit/auth-oauth-device] \"onVerification\" option must be a function (https://github.com/octokit/auth-oauth-device.js#usage)');\n    }\n    // @ts-ignore too much for tsc / ts-jest ¯\\_(ツ)_/¯\n    return Object.assign(auth.bind(null, state), {\n        hook: hook.bind(null, state),\n    });\n}\n"]},"metadata":{},"sourceType":"module"}