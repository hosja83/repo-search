{"ast":null,"code":"import { Octokit as Octokit$1 } from '@octokit/core';\nimport { paginateRest } from '@octokit/plugin-paginate-rest';\nimport { restEndpointMethods } from '@octokit/plugin-rest-endpoint-methods';\nimport { retry } from '@octokit/plugin-retry';\nimport { throttling } from '@octokit/plugin-throttling';\nimport { App as App$1 } from '@octokit/app';\nexport { createNodeMiddleware } from '@octokit/app';\nimport { OAuthApp as OAuthApp$1 } from '@octokit/oauth-app';\nconst VERSION = \"2.0.3\";\nconst Octokit = Octokit$1.plugin(restEndpointMethods, paginateRest, retry, throttling).defaults({\n  userAgent: `octokit.js/${VERSION}`,\n  throttle: {\n    onRateLimit,\n    onAbuseLimit\n  }\n}); // istanbul ignore next no need to test internals of the throttle plugin\n\nfunction onRateLimit(retryAfter, options, octokit) {\n  octokit.log.warn(`Request quota exhausted for request ${options.method} ${options.url}`);\n\n  if (options.request.retryCount === 0) {\n    // only retries once\n    octokit.log.info(`Retrying after ${retryAfter} seconds!`);\n    return true;\n  }\n} // istanbul ignore next no need to test internals of the throttle plugin\n\n\nfunction onAbuseLimit(retryAfter, options, octokit) {\n  octokit.log.warn(`Abuse detected for request ${options.method} ${options.url}`);\n\n  if (options.request.retryCount === 0) {\n    // only retries once\n    octokit.log.info(`Retrying after ${retryAfter} seconds!`);\n    return true;\n  }\n}\n\nconst App = App$1.defaults({\n  Octokit\n});\nconst OAuthApp = OAuthApp$1.defaults({\n  Octokit\n});\nexport { App, OAuthApp, Octokit };","map":{"version":3,"mappings":";;;;;;;;AAAO,MAAMA,OAAO,GAAG,OAAhB;ACMK,MAACC,OAAO,GAAGC,SAAW,CAACC,MAAZD,CAAmBE,mBAAnBF,EAAwCG,YAAxCH,EAAsDI,KAAtDJ,EAA6DK,UAA7DL,EAAyEM,QAAzEN,CAAkF;EACrGO,SAAS,EAAG,cAAaT,OAAQ,EADoE;EAErGU,QAAQ,EAAE;IACNC,WADM;IAENC;EAFM;AAF2F,CAAlFV,CAAX,C,CAOZ;;AACA,SAASS,WAAT,CAAqBE,UAArB,EAAiCC,OAAjC,EAA0CC,OAA1C,EAAmD;EAC/CA,OAAO,CAACC,GAAR,CAAYC,IAAZ,CAAkB,uCAAsCH,OAAO,CAACI,MAAO,IAAGJ,OAAO,CAACK,GAAI,EAAtF;;EACA,IAAIL,OAAO,CAACM,OAAR,CAAgBC,UAAhB,KAA+B,CAAnC,EAAsC;IAC1C;IACQN,OAAO,CAACC,GAAR,CAAYM,IAAZ,CAAkB,kBAAiBT,UAAW,WAA9C;IACA,OAAO,IAAP;EACH;AACJ,C,CACD;;;AACA,SAASD,YAAT,CAAsBC,UAAtB,EAAkCC,OAAlC,EAA2CC,OAA3C,EAAoD;EAChDA,OAAO,CAACC,GAAR,CAAYC,IAAZ,CAAkB,8BAA6BH,OAAO,CAACI,MAAO,IAAGJ,OAAO,CAACK,GAAI,EAA7E;;EACA,IAAIL,OAAO,CAACM,OAAR,CAAgBC,UAAhB,KAA+B,CAAnC,EAAsC;IAC1C;IACQN,OAAO,CAACC,GAAR,CAAYM,IAAZ,CAAkB,kBAAiBT,UAAW,WAA9C;IACA,OAAO,IAAP;EACH;AACJ;;AC3BW,MAACU,GAAG,GAAGC,KAAU,CAAChB,QAAXgB,CAAoB;EAAEvB;AAAF,CAApBuB,CAAP;AACZ,MAAaC,QAAQ,GAAGC,UAAe,CAAClB,QAAhBkB,CAAyB;EAAEzB;AAAF,CAAzByB,CAAxB","names":["VERSION","Octokit","OctokitCore","plugin","restEndpointMethods","paginateRest","retry","throttling","defaults","userAgent","throttle","onRateLimit","onAbuseLimit","retryAfter","options","octokit","log","warn","method","url","request","retryCount","info","App","DefaultApp","OAuthApp","DefaultOAuthApp"],"sources":["/home/hosainy/documents/oden-project/repos/sas-interview-assignment/node_modules/octokit/dist-src/version.js","/home/hosainy/documents/oden-project/repos/sas-interview-assignment/node_modules/octokit/dist-src/octokit.js","/home/hosainy/documents/oden-project/repos/sas-interview-assignment/node_modules/octokit/dist-src/app.js"],"sourcesContent":["export const VERSION = \"2.0.3\";\n","import { Octokit as OctokitCore } from \"@octokit/core\";\nimport { paginateRest } from \"@octokit/plugin-paginate-rest\";\nimport { restEndpointMethods } from \"@octokit/plugin-rest-endpoint-methods\";\nimport { retry } from \"@octokit/plugin-retry\";\nimport { throttling } from \"@octokit/plugin-throttling\";\nimport { VERSION } from \"./version\";\nexport const Octokit = OctokitCore.plugin(restEndpointMethods, paginateRest, retry, throttling).defaults({\n    userAgent: `octokit.js/${VERSION}`,\n    throttle: {\n        onRateLimit,\n        onAbuseLimit,\n    },\n});\n// istanbul ignore next no need to test internals of the throttle plugin\nfunction onRateLimit(retryAfter, options, octokit) {\n    octokit.log.warn(`Request quota exhausted for request ${options.method} ${options.url}`);\n    if (options.request.retryCount === 0) {\n        // only retries once\n        octokit.log.info(`Retrying after ${retryAfter} seconds!`);\n        return true;\n    }\n}\n// istanbul ignore next no need to test internals of the throttle plugin\nfunction onAbuseLimit(retryAfter, options, octokit) {\n    octokit.log.warn(`Abuse detected for request ${options.method} ${options.url}`);\n    if (options.request.retryCount === 0) {\n        // only retries once\n        octokit.log.info(`Retrying after ${retryAfter} seconds!`);\n        return true;\n    }\n}\n","import { App as DefaultApp } from \"@octokit/app\";\nimport { OAuthApp as DefaultOAuthApp } from \"@octokit/oauth-app\";\nimport { Octokit } from \"./octokit\";\nexport const App = DefaultApp.defaults({ Octokit });\nexport const OAuthApp = DefaultOAuthApp.defaults({ Octokit });\nexport { createNodeMiddleware } from \"@octokit/app\";\n"]},"metadata":{},"sourceType":"module"}