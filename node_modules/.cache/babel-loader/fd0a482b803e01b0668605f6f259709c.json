{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nfunction _interopDefault(ex) {\n  return ex && typeof ex === 'object' && 'default' in ex ? ex['default'] : ex;\n}\n\nvar oauthAuthorizationUrl = require('@octokit/oauth-authorization-url');\n\nvar request = require('@octokit/request');\n\nvar requestError = require('@octokit/request-error');\n\nvar btoa = _interopDefault(require('btoa-lite'));\n\nconst VERSION = \"2.0.2\";\n\nfunction requestToOAuthBaseUrl(request) {\n  const endpointDefaults = request.endpoint.DEFAULTS;\n  return /^https:\\/\\/(api\\.)?github\\.com$/.test(endpointDefaults.baseUrl) ? \"https://github.com\" : endpointDefaults.baseUrl.replace(\"/api/v3\", \"\");\n}\n\nasync function oauthRequest(request, route, parameters) {\n  const withOAuthParameters = {\n    baseUrl: requestToOAuthBaseUrl(request),\n    headers: {\n      accept: \"application/json\"\n    },\n    ...parameters\n  };\n  const response = await request(route, withOAuthParameters);\n\n  if (\"error\" in response.data) {\n    const error = new requestError.RequestError(`${response.data.error_description} (${response.data.error}, ${response.data.error_uri})`, 400, {\n      request: request.endpoint.merge(route, withOAuthParameters),\n      headers: response.headers\n    }); // @ts-ignore add custom response property until https://github.com/octokit/request-error.js/issues/169 is resolved\n\n    error.response = response;\n    throw error;\n  }\n\n  return response;\n}\n\nfunction getWebFlowAuthorizationUrl(_ref) {\n  let {\n    request: request$1 = request.request,\n    ...options\n  } = _ref;\n  const baseUrl = requestToOAuthBaseUrl(request$1); // @ts-expect-error TypeScript wants `clientType` to be set explicitly ¯\\_(ツ)_/¯\n\n  return oauthAuthorizationUrl.oauthAuthorizationUrl({ ...options,\n    baseUrl\n  });\n}\n\nasync function exchangeWebFlowCode(options) {\n  const request$1 = options.request ||\n  /* istanbul ignore next: we always pass a custom request in tests */\n  request.request;\n  const response = await oauthRequest(request$1, \"POST /login/oauth/access_token\", {\n    client_id: options.clientId,\n    client_secret: options.clientSecret,\n    code: options.code,\n    redirect_uri: options.redirectUrl\n  });\n  const authentication = {\n    clientType: options.clientType,\n    clientId: options.clientId,\n    clientSecret: options.clientSecret,\n    token: response.data.access_token,\n    scopes: response.data.scope.split(/\\s+/).filter(Boolean)\n  };\n\n  if (options.clientType === \"github-app\") {\n    if (\"refresh_token\" in response.data) {\n      const apiTimeInMs = new Date(response.headers.date).getTime();\n      authentication.refreshToken = response.data.refresh_token, authentication.expiresAt = toTimestamp(apiTimeInMs, response.data.expires_in), authentication.refreshTokenExpiresAt = toTimestamp(apiTimeInMs, response.data.refresh_token_expires_in);\n    }\n\n    delete authentication.scopes;\n  }\n\n  return { ...response,\n    authentication\n  };\n}\n\nfunction toTimestamp(apiTimeInMs, expirationInSeconds) {\n  return new Date(apiTimeInMs + expirationInSeconds * 1000).toISOString();\n}\n\nasync function createDeviceCode(options) {\n  const request$1 = options.request ||\n  /* istanbul ignore next: we always pass a custom request in tests */\n  request.request;\n  const parameters = {\n    client_id: options.clientId\n  };\n\n  if (\"scopes\" in options && Array.isArray(options.scopes)) {\n    parameters.scope = options.scopes.join(\" \");\n  }\n\n  return oauthRequest(request$1, \"POST /login/device/code\", parameters);\n}\n\nasync function exchangeDeviceCode(options) {\n  const request$1 = options.request ||\n  /* istanbul ignore next: we always pass a custom request in tests */\n  request.request;\n  const response = await oauthRequest(request$1, \"POST /login/oauth/access_token\", {\n    client_id: options.clientId,\n    device_code: options.code,\n    grant_type: \"urn:ietf:params:oauth:grant-type:device_code\"\n  });\n  const authentication = {\n    clientType: options.clientType,\n    clientId: options.clientId,\n    token: response.data.access_token,\n    scopes: response.data.scope.split(/\\s+/).filter(Boolean)\n  };\n\n  if (\"clientSecret\" in options) {\n    authentication.clientSecret = options.clientSecret;\n  }\n\n  if (options.clientType === \"github-app\") {\n    if (\"refresh_token\" in response.data) {\n      const apiTimeInMs = new Date(response.headers.date).getTime();\n      authentication.refreshToken = response.data.refresh_token, authentication.expiresAt = toTimestamp$1(apiTimeInMs, response.data.expires_in), authentication.refreshTokenExpiresAt = toTimestamp$1(apiTimeInMs, response.data.refresh_token_expires_in);\n    }\n\n    delete authentication.scopes;\n  }\n\n  return { ...response,\n    authentication\n  };\n}\n\nfunction toTimestamp$1(apiTimeInMs, expirationInSeconds) {\n  return new Date(apiTimeInMs + expirationInSeconds * 1000).toISOString();\n}\n\nasync function checkToken(options) {\n  const request$1 = options.request ||\n  /* istanbul ignore next: we always pass a custom request in tests */\n  request.request;\n  const response = await request$1(\"POST /applications/{client_id}/token\", {\n    headers: {\n      authorization: `basic ${btoa(`${options.clientId}:${options.clientSecret}`)}`\n    },\n    client_id: options.clientId,\n    access_token: options.token\n  });\n  const authentication = {\n    clientType: options.clientType,\n    clientId: options.clientId,\n    clientSecret: options.clientSecret,\n    token: options.token,\n    scopes: response.data.scopes\n  };\n  if (response.data.expires_at) authentication.expiresAt = response.data.expires_at;\n\n  if (options.clientType === \"github-app\") {\n    delete authentication.scopes;\n  }\n\n  return { ...response,\n    authentication\n  };\n}\n\nasync function refreshToken(options) {\n  const request$1 = options.request ||\n  /* istanbul ignore next: we always pass a custom request in tests */\n  request.request;\n  const response = await oauthRequest(request$1, \"POST /login/oauth/access_token\", {\n    client_id: options.clientId,\n    client_secret: options.clientSecret,\n    grant_type: \"refresh_token\",\n    refresh_token: options.refreshToken\n  });\n  const apiTimeInMs = new Date(response.headers.date).getTime();\n  const authentication = {\n    clientType: \"github-app\",\n    clientId: options.clientId,\n    clientSecret: options.clientSecret,\n    token: response.data.access_token,\n    refreshToken: response.data.refresh_token,\n    expiresAt: toTimestamp$2(apiTimeInMs, response.data.expires_in),\n    refreshTokenExpiresAt: toTimestamp$2(apiTimeInMs, response.data.refresh_token_expires_in)\n  };\n  return { ...response,\n    authentication\n  };\n}\n\nfunction toTimestamp$2(apiTimeInMs, expirationInSeconds) {\n  return new Date(apiTimeInMs + expirationInSeconds * 1000).toISOString();\n}\n\nasync function scopeToken(options) {\n  const {\n    request: request$1,\n    clientType,\n    clientId,\n    clientSecret,\n    token,\n    ...requestOptions\n  } = options;\n  const response = await (request$1 ||\n  /* istanbul ignore next: we always pass a custom request in tests */\n  request.request)(\"POST /applications/{client_id}/token/scoped\", {\n    headers: {\n      authorization: `basic ${btoa(`${clientId}:${clientSecret}`)}`\n    },\n    client_id: clientId,\n    access_token: token,\n    ...requestOptions\n  });\n  const authentication = Object.assign({\n    clientType,\n    clientId,\n    clientSecret,\n    token: response.data.token\n  }, response.data.expires_at ? {\n    expiresAt: response.data.expires_at\n  } : {});\n  return { ...response,\n    authentication\n  };\n}\n\nasync function resetToken(options) {\n  const request$1 = options.request ||\n  /* istanbul ignore next: we always pass a custom request in tests */\n  request.request;\n  const auth = btoa(`${options.clientId}:${options.clientSecret}`);\n  const response = await request$1(\"PATCH /applications/{client_id}/token\", {\n    headers: {\n      authorization: `basic ${auth}`\n    },\n    client_id: options.clientId,\n    access_token: options.token\n  });\n  const authentication = {\n    clientType: options.clientType,\n    clientId: options.clientId,\n    clientSecret: options.clientSecret,\n    token: response.data.token,\n    scopes: response.data.scopes\n  };\n  if (response.data.expires_at) authentication.expiresAt = response.data.expires_at;\n\n  if (options.clientType === \"github-app\") {\n    delete authentication.scopes;\n  }\n\n  return { ...response,\n    authentication\n  };\n}\n\nasync function deleteToken(options) {\n  const request$1 = options.request ||\n  /* istanbul ignore next: we always pass a custom request in tests */\n  request.request;\n  const auth = btoa(`${options.clientId}:${options.clientSecret}`);\n  return request$1(\"DELETE /applications/{client_id}/token\", {\n    headers: {\n      authorization: `basic ${auth}`\n    },\n    client_id: options.clientId,\n    access_token: options.token\n  });\n}\n\nasync function deleteAuthorization(options) {\n  const request$1 = options.request ||\n  /* istanbul ignore next: we always pass a custom request in tests */\n  request.request;\n  const auth = btoa(`${options.clientId}:${options.clientSecret}`);\n  return request$1(\"DELETE /applications/{client_id}/grant\", {\n    headers: {\n      authorization: `basic ${auth}`\n    },\n    client_id: options.clientId,\n    access_token: options.token\n  });\n}\n\nexports.VERSION = VERSION;\nexports.checkToken = checkToken;\nexports.createDeviceCode = createDeviceCode;\nexports.deleteAuthorization = deleteAuthorization;\nexports.deleteToken = deleteToken;\nexports.exchangeDeviceCode = exchangeDeviceCode;\nexports.exchangeWebFlowCode = exchangeWebFlowCode;\nexports.getWebFlowAuthorizationUrl = getWebFlowAuthorizationUrl;\nexports.refreshToken = refreshToken;\nexports.resetToken = resetToken;\nexports.scopeToken = scopeToken;","map":{"version":3,"mappings":"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","names":["VERSION","requestToOAuthBaseUrl","request","endpointDefaults","endpoint","DEFAULTS","test","baseUrl","replace","oauthRequest","route","parameters","withOAuthParameters","headers","accept","response","data","error","RequestError","error_description","error_uri","merge","getWebFlowAuthorizationUrl","defaultRequest","options","oauthAuthorizationUrl","exchangeWebFlowCode","client_id","clientId","client_secret","clientSecret","code","redirect_uri","redirectUrl","authentication","clientType","token","access_token","scopes","scope","split","filter","Boolean","apiTimeInMs","Date","date","getTime","refreshToken","refresh_token","expiresAt","toTimestamp","expires_in","refreshTokenExpiresAt","refresh_token_expires_in","expirationInSeconds","toISOString","createDeviceCode","Array","isArray","join","exchangeDeviceCode","device_code","grant_type","checkToken","authorization","btoa","expires_at","scopeToken","requestOptions","Object","assign","resetToken","auth","deleteToken","deleteAuthorization"],"sources":["/home/hosainy/documents/oden-project/repos/sas-interview-assignment/node_modules/@octokit/oauth-methods/dist-src/version.js","/home/hosainy/documents/oden-project/repos/sas-interview-assignment/node_modules/@octokit/oauth-methods/dist-src/utils.js","/home/hosainy/documents/oden-project/repos/sas-interview-assignment/node_modules/@octokit/oauth-methods/dist-src/get-web-flow-authorization-url.js","/home/hosainy/documents/oden-project/repos/sas-interview-assignment/node_modules/@octokit/oauth-methods/dist-src/exchange-web-flow-code.js","/home/hosainy/documents/oden-project/repos/sas-interview-assignment/node_modules/@octokit/oauth-methods/dist-src/create-device-code.js","/home/hosainy/documents/oden-project/repos/sas-interview-assignment/node_modules/@octokit/oauth-methods/dist-src/exchange-device-code.js","/home/hosainy/documents/oden-project/repos/sas-interview-assignment/node_modules/@octokit/oauth-methods/dist-src/check-token.js","/home/hosainy/documents/oden-project/repos/sas-interview-assignment/node_modules/@octokit/oauth-methods/dist-src/refresh-token.js","/home/hosainy/documents/oden-project/repos/sas-interview-assignment/node_modules/@octokit/oauth-methods/dist-src/scope-token.js","/home/hosainy/documents/oden-project/repos/sas-interview-assignment/node_modules/@octokit/oauth-methods/dist-src/reset-token.js","/home/hosainy/documents/oden-project/repos/sas-interview-assignment/node_modules/@octokit/oauth-methods/dist-src/delete-token.js","/home/hosainy/documents/oden-project/repos/sas-interview-assignment/node_modules/@octokit/oauth-methods/dist-src/delete-authorization.js"],"sourcesContent":["export const VERSION = \"2.0.2\";\n","import { RequestError } from \"@octokit/request-error\";\nexport function requestToOAuthBaseUrl(request) {\n    const endpointDefaults = request.endpoint.DEFAULTS;\n    return /^https:\\/\\/(api\\.)?github\\.com$/.test(endpointDefaults.baseUrl)\n        ? \"https://github.com\"\n        : endpointDefaults.baseUrl.replace(\"/api/v3\", \"\");\n}\nexport async function oauthRequest(request, route, parameters) {\n    const withOAuthParameters = {\n        baseUrl: requestToOAuthBaseUrl(request),\n        headers: {\n            accept: \"application/json\",\n        },\n        ...parameters,\n    };\n    const response = await request(route, withOAuthParameters);\n    if (\"error\" in response.data) {\n        const error = new RequestError(`${response.data.error_description} (${response.data.error}, ${response.data.error_uri})`, 400, {\n            request: request.endpoint.merge(route, withOAuthParameters),\n            headers: response.headers,\n        });\n        // @ts-ignore add custom response property until https://github.com/octokit/request-error.js/issues/169 is resolved\n        error.response = response;\n        throw error;\n    }\n    return response;\n}\n","import { oauthAuthorizationUrl, } from \"@octokit/oauth-authorization-url\";\nimport { request as defaultRequest } from \"@octokit/request\";\nimport { requestToOAuthBaseUrl } from \"./utils\";\nexport function getWebFlowAuthorizationUrl({ request = defaultRequest, ...options }) {\n    const baseUrl = requestToOAuthBaseUrl(request);\n    // @ts-expect-error TypeScript wants `clientType` to be set explicitly ¯\\_(ツ)_/¯\n    return oauthAuthorizationUrl({\n        ...options,\n        baseUrl,\n    });\n}\n","import { request as defaultRequest } from \"@octokit/request\";\nimport { oauthRequest } from \"./utils\";\nexport async function exchangeWebFlowCode(options) {\n    const request = options.request ||\n        /* istanbul ignore next: we always pass a custom request in tests */\n        defaultRequest;\n    const response = await oauthRequest(request, \"POST /login/oauth/access_token\", {\n        client_id: options.clientId,\n        client_secret: options.clientSecret,\n        code: options.code,\n        redirect_uri: options.redirectUrl,\n    });\n    const authentication = {\n        clientType: options.clientType,\n        clientId: options.clientId,\n        clientSecret: options.clientSecret,\n        token: response.data.access_token,\n        scopes: response.data.scope.split(/\\s+/).filter(Boolean),\n    };\n    if (options.clientType === \"github-app\") {\n        if (\"refresh_token\" in response.data) {\n            const apiTimeInMs = new Date(response.headers.date).getTime();\n            (authentication.refreshToken = response.data.refresh_token),\n                (authentication.expiresAt = toTimestamp(apiTimeInMs, response.data.expires_in)),\n                (authentication.refreshTokenExpiresAt = toTimestamp(apiTimeInMs, response.data.refresh_token_expires_in));\n        }\n        delete authentication.scopes;\n    }\n    return { ...response, authentication };\n}\nfunction toTimestamp(apiTimeInMs, expirationInSeconds) {\n    return new Date(apiTimeInMs + expirationInSeconds * 1000).toISOString();\n}\n","import { request as defaultRequest } from \"@octokit/request\";\nimport { oauthRequest } from \"./utils\";\nexport async function createDeviceCode(options) {\n    const request = options.request ||\n        /* istanbul ignore next: we always pass a custom request in tests */\n        defaultRequest;\n    const parameters = {\n        client_id: options.clientId,\n    };\n    if (\"scopes\" in options && Array.isArray(options.scopes)) {\n        parameters.scope = options.scopes.join(\" \");\n    }\n    return oauthRequest(request, \"POST /login/device/code\", parameters);\n}\n","import { request as defaultRequest } from \"@octokit/request\";\nimport { oauthRequest } from \"./utils\";\nexport async function exchangeDeviceCode(options) {\n    const request = options.request ||\n        /* istanbul ignore next: we always pass a custom request in tests */\n        defaultRequest;\n    const response = await oauthRequest(request, \"POST /login/oauth/access_token\", {\n        client_id: options.clientId,\n        device_code: options.code,\n        grant_type: \"urn:ietf:params:oauth:grant-type:device_code\",\n    });\n    const authentication = {\n        clientType: options.clientType,\n        clientId: options.clientId,\n        token: response.data.access_token,\n        scopes: response.data.scope.split(/\\s+/).filter(Boolean),\n    };\n    if (\"clientSecret\" in options) {\n        authentication.clientSecret = options.clientSecret;\n    }\n    if (options.clientType === \"github-app\") {\n        if (\"refresh_token\" in response.data) {\n            const apiTimeInMs = new Date(response.headers.date).getTime();\n            (authentication.refreshToken = response.data.refresh_token),\n                (authentication.expiresAt = toTimestamp(apiTimeInMs, response.data.expires_in)),\n                (authentication.refreshTokenExpiresAt = toTimestamp(apiTimeInMs, response.data.refresh_token_expires_in));\n        }\n        delete authentication.scopes;\n    }\n    return { ...response, authentication };\n}\nfunction toTimestamp(apiTimeInMs, expirationInSeconds) {\n    return new Date(apiTimeInMs + expirationInSeconds * 1000).toISOString();\n}\n","import { request as defaultRequest } from \"@octokit/request\";\nimport btoa from \"btoa-lite\";\nexport async function checkToken(options) {\n    const request = options.request ||\n        /* istanbul ignore next: we always pass a custom request in tests */\n        defaultRequest;\n    const response = await request(\"POST /applications/{client_id}/token\", {\n        headers: {\n            authorization: `basic ${btoa(`${options.clientId}:${options.clientSecret}`)}`,\n        },\n        client_id: options.clientId,\n        access_token: options.token,\n    });\n    const authentication = {\n        clientType: options.clientType,\n        clientId: options.clientId,\n        clientSecret: options.clientSecret,\n        token: options.token,\n        scopes: response.data.scopes,\n    };\n    if (response.data.expires_at)\n        authentication.expiresAt = response.data.expires_at;\n    if (options.clientType === \"github-app\") {\n        delete authentication.scopes;\n    }\n    return { ...response, authentication };\n}\n","import { request as defaultRequest } from \"@octokit/request\";\nimport { oauthRequest } from \"./utils\";\nexport async function refreshToken(options) {\n    const request = options.request ||\n        /* istanbul ignore next: we always pass a custom request in tests */\n        defaultRequest;\n    const response = await oauthRequest(request, \"POST /login/oauth/access_token\", {\n        client_id: options.clientId,\n        client_secret: options.clientSecret,\n        grant_type: \"refresh_token\",\n        refresh_token: options.refreshToken,\n    });\n    const apiTimeInMs = new Date(response.headers.date).getTime();\n    const authentication = {\n        clientType: \"github-app\",\n        clientId: options.clientId,\n        clientSecret: options.clientSecret,\n        token: response.data.access_token,\n        refreshToken: response.data.refresh_token,\n        expiresAt: toTimestamp(apiTimeInMs, response.data.expires_in),\n        refreshTokenExpiresAt: toTimestamp(apiTimeInMs, response.data.refresh_token_expires_in),\n    };\n    return { ...response, authentication };\n}\nfunction toTimestamp(apiTimeInMs, expirationInSeconds) {\n    return new Date(apiTimeInMs + expirationInSeconds * 1000).toISOString();\n}\n","import { request as defaultRequest } from \"@octokit/request\";\nimport btoa from \"btoa-lite\";\nexport async function scopeToken(options) {\n    const { request, clientType, clientId, clientSecret, token, ...requestOptions } = options;\n    const response = await (request ||\n        /* istanbul ignore next: we always pass a custom request in tests */ defaultRequest)(\"POST /applications/{client_id}/token/scoped\", {\n        headers: {\n            authorization: `basic ${btoa(`${clientId}:${clientSecret}`)}`,\n        },\n        client_id: clientId,\n        access_token: token,\n        ...requestOptions,\n    });\n    const authentication = Object.assign({\n        clientType,\n        clientId,\n        clientSecret,\n        token: response.data.token,\n    }, response.data.expires_at ? { expiresAt: response.data.expires_at } : {});\n    return { ...response, authentication };\n}\n","import { request as defaultRequest } from \"@octokit/request\";\nimport btoa from \"btoa-lite\";\nexport async function resetToken(options) {\n    const request = options.request ||\n        /* istanbul ignore next: we always pass a custom request in tests */\n        defaultRequest;\n    const auth = btoa(`${options.clientId}:${options.clientSecret}`);\n    const response = await request(\"PATCH /applications/{client_id}/token\", {\n        headers: {\n            authorization: `basic ${auth}`,\n        },\n        client_id: options.clientId,\n        access_token: options.token,\n    });\n    const authentication = {\n        clientType: options.clientType,\n        clientId: options.clientId,\n        clientSecret: options.clientSecret,\n        token: response.data.token,\n        scopes: response.data.scopes,\n    };\n    if (response.data.expires_at)\n        authentication.expiresAt = response.data.expires_at;\n    if (options.clientType === \"github-app\") {\n        delete authentication.scopes;\n    }\n    return { ...response, authentication };\n}\n","import { request as defaultRequest } from \"@octokit/request\";\nimport btoa from \"btoa-lite\";\nexport async function deleteToken(options) {\n    const request = options.request ||\n        /* istanbul ignore next: we always pass a custom request in tests */\n        defaultRequest;\n    const auth = btoa(`${options.clientId}:${options.clientSecret}`);\n    return request(\"DELETE /applications/{client_id}/token\", {\n        headers: {\n            authorization: `basic ${auth}`,\n        },\n        client_id: options.clientId,\n        access_token: options.token,\n    });\n}\n","import { request as defaultRequest } from \"@octokit/request\";\nimport btoa from \"btoa-lite\";\nexport async function deleteAuthorization(options) {\n    const request = options.request ||\n        /* istanbul ignore next: we always pass a custom request in tests */\n        defaultRequest;\n    const auth = btoa(`${options.clientId}:${options.clientSecret}`);\n    return request(\"DELETE /applications/{client_id}/grant\", {\n        headers: {\n            authorization: `basic ${auth}`,\n        },\n        client_id: options.clientId,\n        access_token: options.token,\n    });\n}\n"]},"metadata":{},"sourceType":"script"}