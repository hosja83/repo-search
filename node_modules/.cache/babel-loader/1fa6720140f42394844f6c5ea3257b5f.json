{"ast":null,"code":"import { getUserAgent } from 'universal-user-agent';\nimport { Collection } from 'before-after-hook';\nimport { request } from '@octokit/request';\nimport { withCustomRequest } from '@octokit/graphql';\nimport { createTokenAuth } from '@octokit/auth-token';\nconst VERSION = \"4.0.4\";\n\nclass Octokit {\n  constructor() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    const hook = new Collection();\n    const requestDefaults = {\n      baseUrl: request.endpoint.DEFAULTS.baseUrl,\n      headers: {},\n      request: Object.assign({}, options.request, {\n        // @ts-ignore internal usage only, no need to type\n        hook: hook.bind(null, \"request\")\n      }),\n      mediaType: {\n        previews: [],\n        format: \"\"\n      }\n    }; // prepend default user agent with `options.userAgent` if set\n\n    requestDefaults.headers[\"user-agent\"] = [options.userAgent, `octokit-core.js/${VERSION} ${getUserAgent()}`].filter(Boolean).join(\" \");\n\n    if (options.baseUrl) {\n      requestDefaults.baseUrl = options.baseUrl;\n    }\n\n    if (options.previews) {\n      requestDefaults.mediaType.previews = options.previews;\n    }\n\n    if (options.timeZone) {\n      requestDefaults.headers[\"time-zone\"] = options.timeZone;\n    }\n\n    this.request = request.defaults(requestDefaults);\n    this.graphql = withCustomRequest(this.request).defaults(requestDefaults);\n    this.log = Object.assign({\n      debug: () => {},\n      info: () => {},\n      warn: console.warn.bind(console),\n      error: console.error.bind(console)\n    }, options.log);\n    this.hook = hook; // (1) If neither `options.authStrategy` nor `options.auth` are set, the `octokit` instance\n    //     is unauthenticated. The `this.auth()` method is a no-op and no request hook is registered.\n    // (2) If only `options.auth` is set, use the default token authentication strategy.\n    // (3) If `options.authStrategy` is set then use it and pass in `options.auth`. Always pass own request as many strategies accept a custom request instance.\n    // TODO: type `options.auth` based on `options.authStrategy`.\n\n    if (!options.authStrategy) {\n      if (!options.auth) {\n        // (1)\n        this.auth = async () => ({\n          type: \"unauthenticated\"\n        });\n      } else {\n        // (2)\n        const auth = createTokenAuth(options.auth); // @ts-ignore  ¯\\_(ツ)_/¯\n\n        hook.wrap(\"request\", auth.hook);\n        this.auth = auth;\n      }\n    } else {\n      const {\n        authStrategy,\n        ...otherOptions\n      } = options;\n      const auth = authStrategy(Object.assign({\n        request: this.request,\n        log: this.log,\n        // we pass the current octokit instance as well as its constructor options\n        // to allow for authentication strategies that return a new octokit instance\n        // that shares the same internal state as the current one. The original\n        // requirement for this was the \"event-octokit\" authentication strategy\n        // of https://github.com/probot/octokit-auth-probot.\n        octokit: this,\n        octokitOptions: otherOptions\n      }, options.auth)); // @ts-ignore  ¯\\_(ツ)_/¯\n\n      hook.wrap(\"request\", auth.hook);\n      this.auth = auth;\n    } // apply plugins\n    // https://stackoverflow.com/a/16345172\n\n\n    const classConstructor = this.constructor;\n    classConstructor.plugins.forEach(plugin => {\n      Object.assign(this, plugin(this, options));\n    });\n  }\n\n  static defaults(defaults) {\n    const OctokitWithDefaults = class extends this {\n      constructor() {\n        const options = (arguments.length <= 0 ? undefined : arguments[0]) || {};\n\n        if (typeof defaults === \"function\") {\n          super(defaults(options));\n          return;\n        }\n\n        super(Object.assign({}, defaults, options, options.userAgent && defaults.userAgent ? {\n          userAgent: `${options.userAgent} ${defaults.userAgent}`\n        } : null));\n      }\n\n    };\n    return OctokitWithDefaults;\n  }\n  /**\n   * Attach a plugin (or many) to your Octokit instance.\n   *\n   * @example\n   * const API = Octokit.plugin(plugin1, plugin2, plugin3, ...)\n   */\n\n\n  static plugin() {\n    var _a;\n\n    const currentPlugins = this.plugins;\n\n    for (var _len = arguments.length, newPlugins = new Array(_len), _key = 0; _key < _len; _key++) {\n      newPlugins[_key] = arguments[_key];\n    }\n\n    const NewOctokit = (_a = class extends this {}, _a.plugins = currentPlugins.concat(newPlugins.filter(plugin => !currentPlugins.includes(plugin))), _a);\n    return NewOctokit;\n  }\n\n}\n\nOctokit.VERSION = VERSION;\nOctokit.plugins = [];\nexport { Octokit };","map":{"version":3,"mappings":"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","names":["VERSION","Octokit","constructor","options","hook","Collection","requestDefaults","baseUrl","request","endpoint","DEFAULTS","headers","Object","assign","bind","mediaType","previews","format","userAgent","getUserAgent","filter","Boolean","join","timeZone","defaults","graphql","withCustomRequest","log","debug","info","warn","console","error","authStrategy","auth","type","createTokenAuth","wrap","otherOptions","octokit","octokitOptions","classConstructor","plugins","forEach","plugin","OctokitWithDefaults","_a","currentPlugins","newPlugins","NewOctokit","concat","includes"],"sources":["/home/hosainy/documents/oden-project/repos/sas-interview-assignment/node_modules/@octokit/core/dist-src/version.js","/home/hosainy/documents/oden-project/repos/sas-interview-assignment/node_modules/@octokit/core/dist-src/index.js"],"sourcesContent":["export const VERSION = \"4.0.4\";\n","import { getUserAgent } from \"universal-user-agent\";\nimport { Collection } from \"before-after-hook\";\nimport { request } from \"@octokit/request\";\nimport { withCustomRequest } from \"@octokit/graphql\";\nimport { createTokenAuth } from \"@octokit/auth-token\";\nimport { VERSION } from \"./version\";\nexport class Octokit {\n    constructor(options = {}) {\n        const hook = new Collection();\n        const requestDefaults = {\n            baseUrl: request.endpoint.DEFAULTS.baseUrl,\n            headers: {},\n            request: Object.assign({}, options.request, {\n                // @ts-ignore internal usage only, no need to type\n                hook: hook.bind(null, \"request\"),\n            }),\n            mediaType: {\n                previews: [],\n                format: \"\",\n            },\n        };\n        // prepend default user agent with `options.userAgent` if set\n        requestDefaults.headers[\"user-agent\"] = [\n            options.userAgent,\n            `octokit-core.js/${VERSION} ${getUserAgent()}`,\n        ]\n            .filter(Boolean)\n            .join(\" \");\n        if (options.baseUrl) {\n            requestDefaults.baseUrl = options.baseUrl;\n        }\n        if (options.previews) {\n            requestDefaults.mediaType.previews = options.previews;\n        }\n        if (options.timeZone) {\n            requestDefaults.headers[\"time-zone\"] = options.timeZone;\n        }\n        this.request = request.defaults(requestDefaults);\n        this.graphql = withCustomRequest(this.request).defaults(requestDefaults);\n        this.log = Object.assign({\n            debug: () => { },\n            info: () => { },\n            warn: console.warn.bind(console),\n            error: console.error.bind(console),\n        }, options.log);\n        this.hook = hook;\n        // (1) If neither `options.authStrategy` nor `options.auth` are set, the `octokit` instance\n        //     is unauthenticated. The `this.auth()` method is a no-op and no request hook is registered.\n        // (2) If only `options.auth` is set, use the default token authentication strategy.\n        // (3) If `options.authStrategy` is set then use it and pass in `options.auth`. Always pass own request as many strategies accept a custom request instance.\n        // TODO: type `options.auth` based on `options.authStrategy`.\n        if (!options.authStrategy) {\n            if (!options.auth) {\n                // (1)\n                this.auth = async () => ({\n                    type: \"unauthenticated\",\n                });\n            }\n            else {\n                // (2)\n                const auth = createTokenAuth(options.auth);\n                // @ts-ignore  ¯\\_(ツ)_/¯\n                hook.wrap(\"request\", auth.hook);\n                this.auth = auth;\n            }\n        }\n        else {\n            const { authStrategy, ...otherOptions } = options;\n            const auth = authStrategy(Object.assign({\n                request: this.request,\n                log: this.log,\n                // we pass the current octokit instance as well as its constructor options\n                // to allow for authentication strategies that return a new octokit instance\n                // that shares the same internal state as the current one. The original\n                // requirement for this was the \"event-octokit\" authentication strategy\n                // of https://github.com/probot/octokit-auth-probot.\n                octokit: this,\n                octokitOptions: otherOptions,\n            }, options.auth));\n            // @ts-ignore  ¯\\_(ツ)_/¯\n            hook.wrap(\"request\", auth.hook);\n            this.auth = auth;\n        }\n        // apply plugins\n        // https://stackoverflow.com/a/16345172\n        const classConstructor = this.constructor;\n        classConstructor.plugins.forEach((plugin) => {\n            Object.assign(this, plugin(this, options));\n        });\n    }\n    static defaults(defaults) {\n        const OctokitWithDefaults = class extends this {\n            constructor(...args) {\n                const options = args[0] || {};\n                if (typeof defaults === \"function\") {\n                    super(defaults(options));\n                    return;\n                }\n                super(Object.assign({}, defaults, options, options.userAgent && defaults.userAgent\n                    ? {\n                        userAgent: `${options.userAgent} ${defaults.userAgent}`,\n                    }\n                    : null));\n            }\n        };\n        return OctokitWithDefaults;\n    }\n    /**\n     * Attach a plugin (or many) to your Octokit instance.\n     *\n     * @example\n     * const API = Octokit.plugin(plugin1, plugin2, plugin3, ...)\n     */\n    static plugin(...newPlugins) {\n        var _a;\n        const currentPlugins = this.plugins;\n        const NewOctokit = (_a = class extends this {\n            },\n            _a.plugins = currentPlugins.concat(newPlugins.filter((plugin) => !currentPlugins.includes(plugin))),\n            _a);\n        return NewOctokit;\n    }\n}\nOctokit.VERSION = VERSION;\nOctokit.plugins = [];\n"]},"metadata":{},"sourceType":"module"}