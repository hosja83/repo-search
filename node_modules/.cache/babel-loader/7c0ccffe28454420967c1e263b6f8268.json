{"ast":null,"code":"import Bottleneck from 'bottleneck/light'; // @ts-ignore\n\nasync function errorRequest(octokit, state, error, options) {\n  if (!error.request || !error.request.request) {\n    // address https://github.com/octokit/plugin-retry.js/issues/8\n    throw error;\n  } // retry all >= 400 && not doNotRetry\n\n\n  if (error.status >= 400 && !state.doNotRetry.includes(error.status)) {\n    const retries = options.request.retries != null ? options.request.retries : state.retries;\n    const retryAfter = Math.pow((options.request.retryCount || 0) + 1, 2);\n    throw octokit.retry.retryRequest(error, retries, retryAfter);\n  } // Maybe eventually there will be more cases here\n\n\n  throw error;\n} // @ts-ignore\n// @ts-ignore\n\n\nasync function wrapRequest(state, request, options) {\n  const limiter = new Bottleneck(); // @ts-ignore\n\n  limiter.on(\"failed\", function (error, info) {\n    const maxRetries = ~~error.request.request.retries;\n    const after = ~~error.request.request.retryAfter;\n    options.request.retryCount = info.retryCount + 1;\n\n    if (maxRetries > info.retryCount) {\n      // Returning a number instructs the limiter to retry\n      // the request after that number of milliseconds have passed\n      return after * state.retryAfterBaseValue;\n    }\n  });\n  return limiter.schedule(request, options);\n}\n\nconst VERSION = \"3.0.9\";\n\nfunction retry(octokit, octokitOptions) {\n  const state = Object.assign({\n    enabled: true,\n    retryAfterBaseValue: 1000,\n    doNotRetry: [400, 401, 403, 404, 422],\n    retries: 3\n  }, octokitOptions.retry);\n\n  if (state.enabled) {\n    octokit.hook.error(\"request\", errorRequest.bind(null, octokit, state));\n    octokit.hook.wrap(\"request\", wrapRequest.bind(null, state));\n  }\n\n  return {\n    retry: {\n      retryRequest: (error, retries, retryAfter) => {\n        error.request.request = Object.assign({}, error.request.request, {\n          retries: retries,\n          retryAfter: retryAfter\n        });\n        return error;\n      }\n    }\n  };\n}\n\nretry.VERSION = VERSION;\nexport { VERSION, retry };","map":{"version":3,"mappings":"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","names":["errorRequest","octokit","state","error","options","request","status","doNotRetry","includes","retries","retryAfter","Math","pow","retryCount","retry","retryRequest","wrapRequest","limiter","Bottleneck","on","info","maxRetries","after","retryAfterBaseValue","schedule","VERSION","octokitOptions","Object","assign","enabled","hook","bind","wrap"],"sources":["/home/hosainy/documents/oden-project/repos/sas-interview-assignment/node_modules/@octokit/plugin-retry/dist-src/error-request.js","/home/hosainy/documents/oden-project/repos/sas-interview-assignment/node_modules/@octokit/plugin-retry/dist-src/wrap-request.js","/home/hosainy/documents/oden-project/repos/sas-interview-assignment/node_modules/@octokit/plugin-retry/dist-src/index.js"],"sourcesContent":["// @ts-ignore\nexport async function errorRequest(octokit, state, error, options) {\n    if (!error.request || !error.request.request) {\n        // address https://github.com/octokit/plugin-retry.js/issues/8\n        throw error;\n    }\n    // retry all >= 400 && not doNotRetry\n    if (error.status >= 400 && !state.doNotRetry.includes(error.status)) {\n        const retries = options.request.retries != null ? options.request.retries : state.retries;\n        const retryAfter = Math.pow((options.request.retryCount || 0) + 1, 2);\n        throw octokit.retry.retryRequest(error, retries, retryAfter);\n    }\n    // Maybe eventually there will be more cases here\n    throw error;\n}\n","// @ts-ignore\nimport Bottleneck from \"bottleneck/light\";\n// @ts-ignore\nexport async function wrapRequest(state, request, options) {\n    const limiter = new Bottleneck();\n    // @ts-ignore\n    limiter.on(\"failed\", function (error, info) {\n        const maxRetries = ~~error.request.request.retries;\n        const after = ~~error.request.request.retryAfter;\n        options.request.retryCount = info.retryCount + 1;\n        if (maxRetries > info.retryCount) {\n            // Returning a number instructs the limiter to retry\n            // the request after that number of milliseconds have passed\n            return after * state.retryAfterBaseValue;\n        }\n    });\n    return limiter.schedule(request, options);\n}\n","import { errorRequest } from \"./error-request\";\nimport { wrapRequest } from \"./wrap-request\";\nexport const VERSION = \"3.0.9\";\nexport function retry(octokit, octokitOptions) {\n    const state = Object.assign({\n        enabled: true,\n        retryAfterBaseValue: 1000,\n        doNotRetry: [400, 401, 403, 404, 422],\n        retries: 3,\n    }, octokitOptions.retry);\n    if (state.enabled) {\n        octokit.hook.error(\"request\", errorRequest.bind(null, octokit, state));\n        octokit.hook.wrap(\"request\", wrapRequest.bind(null, state));\n    }\n    return {\n        retry: {\n            retryRequest: (error, retries, retryAfter) => {\n                error.request.request = Object.assign({}, error.request.request, {\n                    retries: retries,\n                    retryAfter: retryAfter,\n                });\n                return error;\n            },\n        },\n    };\n}\nretry.VERSION = VERSION;\n"]},"metadata":{},"sourceType":"module"}