{"ast":null,"code":"'use strict';\n\nconst os = require('os');\n\nconst extractPathRegex = /\\s+at.*(?:\\(|\\s)(.*)\\)?/;\nconst pathRegex = /^(?:(?:(?:node|(?:internal\\/[\\w/]*|.*node_modules\\/(?:babel-polyfill|pirates)\\/.*)?\\w+)\\.js:\\d+:\\d+)|native)/;\nconst homeDir = typeof os.homedir === 'undefined' ? '' : os.homedir();\n\nmodule.exports = (stack, options) => {\n  options = Object.assign({\n    pretty: false\n  }, options);\n  return stack.replace(/\\\\/g, '/').split('\\n').filter(line => {\n    const pathMatches = line.match(extractPathRegex);\n\n    if (pathMatches === null || !pathMatches[1]) {\n      return true;\n    }\n\n    const match = pathMatches[1]; // Electron\n\n    if (match.includes('.app/Contents/Resources/electron.asar') || match.includes('.app/Contents/Resources/default_app.asar')) {\n      return false;\n    }\n\n    return !pathRegex.test(match);\n  }).filter(line => line.trim() !== '').map(line => {\n    if (options.pretty) {\n      return line.replace(extractPathRegex, (m, p1) => m.replace(p1, p1.replace(homeDir, '~')));\n    }\n\n    return line;\n  }).join('\\n');\n};","map":{"version":3,"names":["os","require","extractPathRegex","pathRegex","homeDir","homedir","module","exports","stack","options","Object","assign","pretty","replace","split","filter","line","pathMatches","match","includes","test","trim","map","m","p1","join"],"sources":["/home/hosainy/documents/oden-project/repos/sas-interview-assignment/node_modules/clean-stack/index.js"],"sourcesContent":["'use strict';\nconst os = require('os');\n\nconst extractPathRegex = /\\s+at.*(?:\\(|\\s)(.*)\\)?/;\nconst pathRegex = /^(?:(?:(?:node|(?:internal\\/[\\w/]*|.*node_modules\\/(?:babel-polyfill|pirates)\\/.*)?\\w+)\\.js:\\d+:\\d+)|native)/;\nconst homeDir = typeof os.homedir === 'undefined' ? '' : os.homedir();\n\nmodule.exports = (stack, options) => {\n\toptions = Object.assign({pretty: false}, options);\n\n\treturn stack.replace(/\\\\/g, '/')\n\t\t.split('\\n')\n\t\t.filter(line => {\n\t\t\tconst pathMatches = line.match(extractPathRegex);\n\t\t\tif (pathMatches === null || !pathMatches[1]) {\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\tconst match = pathMatches[1];\n\n\t\t\t// Electron\n\t\t\tif (\n\t\t\t\tmatch.includes('.app/Contents/Resources/electron.asar') ||\n\t\t\t\tmatch.includes('.app/Contents/Resources/default_app.asar')\n\t\t\t) {\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\treturn !pathRegex.test(match);\n\t\t})\n\t\t.filter(line => line.trim() !== '')\n\t\t.map(line => {\n\t\t\tif (options.pretty) {\n\t\t\t\treturn line.replace(extractPathRegex, (m, p1) => m.replace(p1, p1.replace(homeDir, '~')));\n\t\t\t}\n\n\t\t\treturn line;\n\t\t})\n\t\t.join('\\n');\n};\n"],"mappings":"AAAA;;AACA,MAAMA,EAAE,GAAGC,OAAO,CAAC,IAAD,CAAlB;;AAEA,MAAMC,gBAAgB,GAAG,yBAAzB;AACA,MAAMC,SAAS,GAAG,8GAAlB;AACA,MAAMC,OAAO,GAAG,OAAOJ,EAAE,CAACK,OAAV,KAAsB,WAAtB,GAAoC,EAApC,GAAyCL,EAAE,CAACK,OAAH,EAAzD;;AAEAC,MAAM,CAACC,OAAP,GAAiB,CAACC,KAAD,EAAQC,OAAR,KAAoB;EACpCA,OAAO,GAAGC,MAAM,CAACC,MAAP,CAAc;IAACC,MAAM,EAAE;EAAT,CAAd,EAA+BH,OAA/B,CAAV;EAEA,OAAOD,KAAK,CAACK,OAAN,CAAc,KAAd,EAAqB,GAArB,EACLC,KADK,CACC,IADD,EAELC,MAFK,CAEEC,IAAI,IAAI;IACf,MAAMC,WAAW,GAAGD,IAAI,CAACE,KAAL,CAAWhB,gBAAX,CAApB;;IACA,IAAIe,WAAW,KAAK,IAAhB,IAAwB,CAACA,WAAW,CAAC,CAAD,CAAxC,EAA6C;MAC5C,OAAO,IAAP;IACA;;IAED,MAAMC,KAAK,GAAGD,WAAW,CAAC,CAAD,CAAzB,CANe,CAQf;;IACA,IACCC,KAAK,CAACC,QAAN,CAAe,uCAAf,KACAD,KAAK,CAACC,QAAN,CAAe,0CAAf,CAFD,EAGE;MACD,OAAO,KAAP;IACA;;IAED,OAAO,CAAChB,SAAS,CAACiB,IAAV,CAAeF,KAAf,CAAR;EACA,CAnBK,EAoBLH,MApBK,CAoBEC,IAAI,IAAIA,IAAI,CAACK,IAAL,OAAgB,EApB1B,EAqBLC,GArBK,CAqBDN,IAAI,IAAI;IACZ,IAAIP,OAAO,CAACG,MAAZ,EAAoB;MACnB,OAAOI,IAAI,CAACH,OAAL,CAAaX,gBAAb,EAA+B,CAACqB,CAAD,EAAIC,EAAJ,KAAWD,CAAC,CAACV,OAAF,CAAUW,EAAV,EAAcA,EAAE,CAACX,OAAH,CAAWT,OAAX,EAAoB,GAApB,CAAd,CAA1C,CAAP;IACA;;IAED,OAAOY,IAAP;EACA,CA3BK,EA4BLS,IA5BK,CA4BA,IA5BA,CAAP;AA6BA,CAhCD"},"metadata":{},"sourceType":"script"}