{"ast":null,"code":"const enc = new TextEncoder();\n\nasync function sign(secret, data) {\n  const signature = await crypto.subtle.sign(\"HMAC\", await importKey(secret), enc.encode(data));\n  return UInt8ArrayToHex(signature);\n}\n\nasync function verify(secret, data, signature) {\n  return await crypto.subtle.verify(\"HMAC\", await importKey(secret), hexToUInt8Array(signature), enc.encode(data));\n}\n\nfunction hexToUInt8Array(string) {\n  // convert string to pairs of 2 characters\n  const pairs = string.match(/[\\dA-F]{2}/gi); // convert the octets to integers\n\n  const integers = pairs.map(function (s) {\n    return parseInt(s, 16);\n  });\n  return new Uint8Array(integers);\n}\n\nfunction UInt8ArrayToHex(signature) {\n  return Array.prototype.map.call(new Uint8Array(signature), x => x.toString(16).padStart(2, \"0\")).join(\"\");\n}\n\nasync function importKey(secret) {\n  return crypto.subtle.importKey(\"raw\", // raw format of the key - should be Uint8Array\n  enc.encode(secret), {\n    // algorithm details\n    name: \"HMAC\",\n    hash: {\n      name: \"SHA-256\"\n    }\n  }, false, // export = false\n  [\"sign\", \"verify\"] // what this key can do\n  );\n}\n\nexport { sign, verify };","map":{"version":3,"mappings":"AAAA,MAAMA,GAAG,GAAG,IAAIC,WAAJ,EAAZ;;AACO,eAAeC,IAAf,CAAoBC,MAApB,EAA4BC,IAA5B,EAAkC;EACrC,MAAMC,SAAS,GAAG,MAAMC,MAAM,CAACC,MAAP,CAAcL,IAAd,CAAmB,MAAnB,EAA2B,MAAMM,SAAS,CAACL,MAAD,CAA1C,EAAoDH,GAAG,CAACS,MAAJ,CAAWL,IAAX,CAApD,CAAxB;EACA,OAAOM,eAAe,CAACL,SAAD,CAAtB;AACH;;AACM,eAAeM,MAAf,CAAsBR,MAAtB,EAA8BC,IAA9B,EAAoCC,SAApC,EAA+C;EAClD,OAAO,MAAMC,MAAM,CAACC,MAAP,CAAcI,MAAd,CAAqB,MAArB,EAA6B,MAAMH,SAAS,CAACL,MAAD,CAA5C,EAAsDS,eAAe,CAACP,SAAD,CAArE,EAAkFL,GAAG,CAACS,MAAJ,CAAWL,IAAX,CAAlF,CAAb;AACH;;AACD,SAASQ,eAAT,CAAyBC,MAAzB,EAAiC;EACjC;EACI,MAAMC,KAAK,GAAGD,MAAM,CAACE,KAAP,CAAa,cAAb,CAAd,CAF6B,CAGjC;;EACI,MAAMC,QAAQ,GAAGF,KAAK,CAACG,GAAN,CAAU,UAAUC,CAAV,EAAa;IACpC,OAAOC,QAAQ,CAACD,CAAD,EAAI,EAAJ,CAAf;EACH,CAFgB,CAAjB;EAGA,OAAO,IAAIE,UAAJ,CAAeJ,QAAf,CAAP;AACH;;AACD,SAASN,eAAT,CAAyBL,SAAzB,EAAoC;EAChC,OAAOgB,KAAK,CAACC,SAAN,CAAgBL,GAAhB,CACFM,IADE,CACG,IAAIH,UAAJ,CAAef,SAAf,CADH,EAC+BmB,CAAD,IAAOA,CAAC,CAACC,QAAF,CAAW,EAAX,EAAeC,QAAf,CAAwB,CAAxB,EAA2B,GAA3B,CADrC,EAEFC,IAFE,CAEG,EAFH,CAAP;AAGH;;AACD,eAAenB,SAAf,CAAyBL,MAAzB,EAAiC;EAC7B,OAAOG,MAAM,CAACC,MAAP,CAAcC,SAAd,CAAwB,KAAxB,EAA6B;EACpCR,GAAG,CAACS,MAAJ,CAAWN,MAAX,CADO,EACa;IACxB;IACQyB,IAAI,EAAE,MAFU;IAGhBC,IAAI,EAAE;MAAED,IAAI,EAAE;IAAR;EAHU,CADb,EAKJ,KALI,EAKC;EACR,CAAC,MAAD,EAAS,QAAT,CANO,CAMW;EANX,CAAP;AAQJ","names":["enc","TextEncoder","sign","secret","data","signature","crypto","subtle","importKey","encode","UInt8ArrayToHex","verify","hexToUInt8Array","string","pairs","match","integers","map","s","parseInt","Uint8Array","Array","prototype","call","x","toString","padStart","join","name","hash"],"sources":["/home/hosainy/documents/oden-project/repos/sas-interview-assignment/node_modules/@octokit/webhooks-methods/dist-src/web.js"],"sourcesContent":["const enc = new TextEncoder();\nexport async function sign(secret, data) {\n    const signature = await crypto.subtle.sign(\"HMAC\", await importKey(secret), enc.encode(data));\n    return UInt8ArrayToHex(signature);\n}\nexport async function verify(secret, data, signature) {\n    return await crypto.subtle.verify(\"HMAC\", await importKey(secret), hexToUInt8Array(signature), enc.encode(data));\n}\nfunction hexToUInt8Array(string) {\n    // convert string to pairs of 2 characters\n    const pairs = string.match(/[\\dA-F]{2}/gi);\n    // convert the octets to integers\n    const integers = pairs.map(function (s) {\n        return parseInt(s, 16);\n    });\n    return new Uint8Array(integers);\n}\nfunction UInt8ArrayToHex(signature) {\n    return Array.prototype.map\n        .call(new Uint8Array(signature), (x) => x.toString(16).padStart(2, \"0\"))\n        .join(\"\");\n}\nasync function importKey(secret) {\n    return crypto.subtle.importKey(\"raw\", // raw format of the key - should be Uint8Array\n    enc.encode(secret), {\n        // algorithm details\n        name: \"HMAC\",\n        hash: { name: \"SHA-256\" },\n    }, false, // export = false\n    [\"sign\", \"verify\"] // what this key can do\n    );\n}\n"]},"metadata":{},"sourceType":"module"}