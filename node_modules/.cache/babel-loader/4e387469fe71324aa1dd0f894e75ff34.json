{"ast":null,"code":"function oauthAuthorizationUrl(options) {\n  const clientType = options.clientType || \"oauth-app\";\n  const baseUrl = options.baseUrl || \"https://github.com\";\n  const result = {\n    clientType,\n    allowSignup: options.allowSignup === false ? false : true,\n    clientId: options.clientId,\n    login: options.login || null,\n    redirectUrl: options.redirectUrl || null,\n    state: options.state || Math.random().toString(36).substr(2),\n    url: \"\"\n  };\n\n  if (clientType === \"oauth-app\") {\n    const scopes = \"scopes\" in options ? options.scopes : [];\n    result.scopes = typeof scopes === \"string\" ? scopes.split(/[,\\s]+/).filter(Boolean) : scopes;\n  }\n\n  result.url = urlBuilderAuthorize(`${baseUrl}/login/oauth/authorize`, result);\n  return result;\n}\n\nfunction urlBuilderAuthorize(base, options) {\n  const map = {\n    allowSignup: \"allow_signup\",\n    clientId: \"client_id\",\n    login: \"login\",\n    redirectUrl: \"redirect_uri\",\n    scopes: \"scope\",\n    state: \"state\"\n  };\n  let url = base;\n  Object.keys(map) // Filter out keys that are null and remove the url key\n  .filter(k => options[k] !== null) // Filter out empty scopes array\n  .filter(k => {\n    if (k !== \"scopes\") return true;\n    if (options.clientType === \"github-app\") return false;\n    return !Array.isArray(options[k]) || options[k].length > 0;\n  }) // Map Array with the proper URL parameter names and change the value to a string using template strings\n  // @ts-ignore\n  .map(key => [map[key], `${options[key]}`]) // Finally, build the URL\n  .forEach((_ref, index) => {\n    let [key, value] = _ref;\n    url += index === 0 ? `?` : \"&\";\n    url += `${key}=${encodeURIComponent(value)}`;\n  });\n  return url;\n}\n\nexport { oauthAuthorizationUrl };","map":{"version":3,"mappings":"AAAO,SAASA,qBAAT,CAA+BC,OAA/B,EAAwC;EAC3C,MAAMC,UAAU,GAAGD,OAAO,CAACC,UAAR,IAAsB,WAAzC;EACA,MAAMC,OAAO,GAAGF,OAAO,CAACE,OAAR,IAAmB,oBAAnC;EACA,MAAMC,MAAM,GAAG;IACXF,UADW;IAEXG,WAAW,EAAEJ,OAAO,CAACI,WAAR,KAAwB,KAAxB,GAAgC,KAAhC,GAAwC,IAF1C;IAGXC,QAAQ,EAAEL,OAAO,CAACK,QAHP;IAIXC,KAAK,EAAEN,OAAO,CAACM,KAAR,IAAiB,IAJb;IAKXC,WAAW,EAAEP,OAAO,CAACO,WAAR,IAAuB,IALzB;IAMXC,KAAK,EAAER,OAAO,CAACQ,KAAR,IAAiBC,IAAI,CAACC,MAAL,GAAcC,QAAd,CAAuB,EAAvB,EAA2BC,MAA3B,CAAkC,CAAlC,CANb;IAOXC,GAAG,EAAE;EAPM,CAAf;;EASA,IAAIZ,UAAU,KAAK,WAAnB,EAAgC;IAC5B,MAAMa,MAAM,GAAG,YAAYd,OAAZ,GAAsBA,OAAO,CAACc,MAA9B,GAAuC,EAAtD;IACAX,MAAM,CAACW,MAAP,GACI,OAAOA,MAAP,KAAkB,QAAlB,GACMA,MAAM,CAACC,KAAP,CAAa,QAAb,EAAuBC,MAAvB,CAA8BC,OAA9B,CADN,GAEMH,MAHV;EAIH;;EACDX,MAAM,CAACU,GAAP,GAAaK,mBAAmB,CAAE,GAAEhB,OAAQ,wBAAZ,EAAqCC,MAArC,CAAhC;EACA,OAAOA,MAAP;AACH;;AACD,SAASe,mBAAT,CAA6BC,IAA7B,EAAmCnB,OAAnC,EAA4C;EACxC,MAAMoB,GAAG,GAAG;IACRhB,WAAW,EAAE,cADL;IAERC,QAAQ,EAAE,WAFF;IAGRC,KAAK,EAAE,OAHC;IAIRC,WAAW,EAAE,cAJL;IAKRO,MAAM,EAAE,OALA;IAMRN,KAAK,EAAE;EANC,CAAZ;EAQA,IAAIK,GAAG,GAAGM,IAAV;EACAE,MAAM,CAACC,IAAP,CAAYF,GAAZ,EACJ;EADI,CAEKJ,MAFL,CAEaO,CAAD,IAAOvB,OAAO,CAACuB,CAAD,CAAP,KAAe,IAFlC,EAGJ;EAHI,CAIKP,MAJL,CAIaO,CAAD,IAAO;IACf,IAAIA,CAAC,KAAK,QAAV,EACI,OAAO,IAAP;IACJ,IAAIvB,OAAO,CAACC,UAAR,KAAuB,YAA3B,EACI,OAAO,KAAP;IACJ,OAAO,CAACuB,KAAK,CAACC,OAAN,CAAczB,OAAO,CAACuB,CAAD,CAArB,CAAD,IAA8BvB,OAAO,CAACuB,CAAD,CAAP,CAAWG,MAAX,GAAoB,CAAzD;EACH,CAVD,EAWJ;EACA;EAZI,CAaKN,GAbL,CAaUO,GAAD,IAAS,CAACP,GAAG,CAACO,GAAD,CAAJ,EAAY,GAAE3B,OAAO,CAAC2B,GAAD,CAAM,EAA3B,CAblB,EAcJ;EAdI,CAeKC,OAfL,CAea,OAAeC,KAAf,KAAyB;IAAA,IAAxB,CAACF,GAAD,EAAMG,KAAN,CAAwB;IAClCjB,GAAG,IAAIgB,KAAK,KAAK,CAAV,GAAe,GAAf,GAAoB,GAA3B;IACAhB,GAAG,IAAK,GAAEc,GAAI,IAAGI,kBAAkB,CAACD,KAAD,CAAQ,EAA3C;EACH,CAlBD;EAmBA,OAAOjB,GAAP;AACJ","names":["oauthAuthorizationUrl","options","clientType","baseUrl","result","allowSignup","clientId","login","redirectUrl","state","Math","random","toString","substr","url","scopes","split","filter","Boolean","urlBuilderAuthorize","base","map","Object","keys","k","Array","isArray","length","key","forEach","index","value","encodeURIComponent"],"sources":["/home/hosainy/documents/oden-project/repos/sas-interview-assignment/node_modules/@octokit/auth-oauth-user/node_modules/@octokit/oauth-authorization-url/dist-src/index.js"],"sourcesContent":["export function oauthAuthorizationUrl(options) {\n    const clientType = options.clientType || \"oauth-app\";\n    const baseUrl = options.baseUrl || \"https://github.com\";\n    const result = {\n        clientType,\n        allowSignup: options.allowSignup === false ? false : true,\n        clientId: options.clientId,\n        login: options.login || null,\n        redirectUrl: options.redirectUrl || null,\n        state: options.state || Math.random().toString(36).substr(2),\n        url: \"\",\n    };\n    if (clientType === \"oauth-app\") {\n        const scopes = \"scopes\" in options ? options.scopes : [];\n        result.scopes =\n            typeof scopes === \"string\"\n                ? scopes.split(/[,\\s]+/).filter(Boolean)\n                : scopes;\n    }\n    result.url = urlBuilderAuthorize(`${baseUrl}/login/oauth/authorize`, result);\n    return result;\n}\nfunction urlBuilderAuthorize(base, options) {\n    const map = {\n        allowSignup: \"allow_signup\",\n        clientId: \"client_id\",\n        login: \"login\",\n        redirectUrl: \"redirect_uri\",\n        scopes: \"scope\",\n        state: \"state\",\n    };\n    let url = base;\n    Object.keys(map)\n        // Filter out keys that are null and remove the url key\n        .filter((k) => options[k] !== null)\n        // Filter out empty scopes array\n        .filter((k) => {\n        if (k !== \"scopes\")\n            return true;\n        if (options.clientType === \"github-app\")\n            return false;\n        return !Array.isArray(options[k]) || options[k].length > 0;\n    })\n        // Map Array with the proper URL parameter names and change the value to a string using template strings\n        // @ts-ignore\n        .map((key) => [map[key], `${options[key]}`])\n        // Finally, build the URL\n        .forEach(([key, value], index) => {\n        url += index === 0 ? `?` : \"&\";\n        url += `${key}=${encodeURIComponent(value)}`;\n    });\n    return url;\n}\n"]},"metadata":{},"sourceType":"module"}