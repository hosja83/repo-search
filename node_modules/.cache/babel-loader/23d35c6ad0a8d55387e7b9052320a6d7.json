{"ast":null,"code":"import { getUserAgent } from 'universal-user-agent';\nimport { request } from '@octokit/request';\nimport { createOAuthDeviceAuth } from '@octokit/auth-oauth-device';\nimport { exchangeWebFlowCode, refreshToken, checkToken, resetToken, deleteToken, deleteAuthorization } from '@octokit/oauth-methods';\nimport btoa from 'btoa-lite';\nconst VERSION = \"2.0.1\"; // @ts-nocheck there is only place for one of us in this file. And it's not you, TS\n\nasync function getAuthentication(state) {\n  // handle code exchange form OAuth Web Flow\n  if (\"code\" in state.strategyOptions) {\n    const {\n      authentication\n    } = await exchangeWebFlowCode({\n      clientId: state.clientId,\n      clientSecret: state.clientSecret,\n      clientType: state.clientType,\n      ...state.strategyOptions,\n      request: state.request\n    });\n    return {\n      type: \"token\",\n      tokenType: \"oauth\",\n      ...authentication\n    };\n  } // handle OAuth device flow\n\n\n  if (\"onVerification\" in state.strategyOptions) {\n    const deviceAuth = createOAuthDeviceAuth({\n      clientType: state.clientType,\n      clientId: state.clientId,\n      ...state.strategyOptions,\n      request: state.request\n    });\n    const authentication = await deviceAuth({\n      type: \"oauth\"\n    });\n    return {\n      clientSecret: state.clientSecret,\n      ...authentication\n    };\n  } // use existing authentication\n\n\n  if (\"token\" in state.strategyOptions) {\n    return {\n      type: \"token\",\n      tokenType: \"oauth\",\n      clientId: state.clientId,\n      clientSecret: state.clientSecret,\n      clientType: state.clientType,\n      ...state.strategyOptions\n    };\n  }\n\n  throw new Error(\"[@octokit/auth-oauth-user] Invalid strategy options\");\n}\n\nasync function auth(state) {\n  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n  if (!state.authentication) {\n    // This is what TS makes us do ¯\\_(ツ)_/¯\n    state.authentication = state.clientType === \"oauth-app\" ? await getAuthentication(state) : await getAuthentication(state);\n  }\n\n  if (state.authentication.invalid) {\n    throw new Error(\"[@octokit/auth-oauth-user] Token is invalid\");\n  }\n\n  const currentAuthentication = state.authentication; // (auto) refresh for user-to-server tokens\n\n  if (\"expiresAt\" in currentAuthentication) {\n    if (options.type === \"refresh\" || new Date(currentAuthentication.expiresAt) < new Date()) {\n      const {\n        authentication\n      } = await refreshToken({\n        clientType: \"github-app\",\n        clientId: state.clientId,\n        clientSecret: state.clientSecret,\n        refreshToken: currentAuthentication.refreshToken,\n        request: state.request\n      });\n      state.authentication = {\n        tokenType: \"oauth\",\n        type: \"token\",\n        ...authentication\n      };\n    }\n  } // throw error for invalid refresh call\n\n\n  if (options.type === \"refresh\") {\n    if (state.clientType === \"oauth-app\") {\n      throw new Error(\"[@octokit/auth-oauth-user] OAuth Apps do not support expiring tokens\");\n    }\n\n    if (!currentAuthentication.hasOwnProperty(\"expiresAt\")) {\n      throw new Error(\"[@octokit/auth-oauth-user] Refresh token missing\");\n    }\n  } // check or reset token\n\n\n  if (options.type === \"check\" || options.type === \"reset\") {\n    const method = options.type === \"check\" ? checkToken : resetToken;\n\n    try {\n      const {\n        authentication\n      } = await method({\n        // @ts-expect-error making TS happy would require unnecessary code so no\n        clientType: state.clientType,\n        clientId: state.clientId,\n        clientSecret: state.clientSecret,\n        token: state.authentication.token,\n        request: state.request\n      });\n      state.authentication = {\n        tokenType: \"oauth\",\n        type: \"token\",\n        // @ts-expect-error TBD\n        ...authentication\n      };\n      return state.authentication;\n    } catch (error) {\n      // istanbul ignore else\n      if (error.status === 404) {\n        error.message = \"[@octokit/auth-oauth-user] Token is invalid\"; // @ts-expect-error TBD\n\n        state.authentication.invalid = true;\n      }\n\n      throw error;\n    }\n  } // invalidate\n\n\n  if (options.type === \"delete\" || options.type === \"deleteAuthorization\") {\n    const method = options.type === \"delete\" ? deleteToken : deleteAuthorization;\n\n    try {\n      await method({\n        // @ts-expect-error making TS happy would require unnecessary code so no\n        clientType: state.clientType,\n        clientId: state.clientId,\n        clientSecret: state.clientSecret,\n        token: state.authentication.token,\n        request: state.request\n      });\n    } catch (error) {\n      // istanbul ignore if\n      if (error.status !== 404) throw error;\n    }\n\n    state.authentication.invalid = true;\n    return state.authentication;\n  }\n\n  return state.authentication;\n}\n/**\n * The following endpoints require an OAuth App to authenticate using its client_id and client_secret.\n *\n * - [`POST /applications/{client_id}/token`](https://docs.github.com/en/rest/reference/apps#check-a-token) - Check a token\n * - [`PATCH /applications/{client_id}/token`](https://docs.github.com/en/rest/reference/apps#reset-a-token) - Reset a token\n * - [`POST /applications/{client_id}/token/scoped`](https://docs.github.com/en/rest/reference/apps#create-a-scoped-access-token) - Create a scoped access token\n * - [`DELETE /applications/{client_id}/token`](https://docs.github.com/en/rest/reference/apps#delete-an-app-token) - Delete an app token\n * - [`DELETE /applications/{client_id}/grant`](https://docs.github.com/en/rest/reference/apps#delete-an-app-authorization) - Delete an app authorization\n *\n * deprecated:\n *\n * - [`GET /applications/{client_id}/tokens/{access_token}`](https://docs.github.com/en/rest/reference/apps#check-an-authorization) - Check an authorization\n * - [`POST /applications/{client_id}/tokens/{access_token}`](https://docs.github.com/en/rest/reference/apps#reset-an-authorization) - Reset an authorization\n * - [`DELETE /applications/{client_id}/tokens/{access_token}`](https://docs.github.com/en/rest/reference/apps#revoke-an-authorization-for-an-application) - Revoke an authorization for an application\n * - [`DELETE /applications/{client_id}/grants/{access_token}`](https://docs.github.com/en/rest/reference/apps#revoke-a-grant-for-an-application) - Revoke a grant for an application\n */\n\n\nconst ROUTES_REQUIRING_BASIC_AUTH = /\\/applications\\/[^/]+\\/(token|grant)s?/;\n\nfunction requiresBasicAuth(url) {\n  return url && ROUTES_REQUIRING_BASIC_AUTH.test(url);\n}\n\nasync function hook(state, request, route) {\n  let parameters = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n  const endpoint = request.endpoint.merge(route, parameters); // Do not intercept OAuth Web/Device flow request\n\n  if (/\\/login\\/(oauth\\/access_token|device\\/code)$/.test(endpoint.url)) {\n    return request(endpoint);\n  }\n\n  if (requiresBasicAuth(endpoint.url)) {\n    const credentials = btoa(`${state.clientId}:${state.clientSecret}`);\n    endpoint.headers.authorization = `basic ${credentials}`;\n    return request(endpoint);\n  } // TS makes us do this ¯\\_(ツ)_/¯\n\n\n  const {\n    token\n  } = state.clientType === \"oauth-app\" ? await auth({ ...state,\n    request\n  }) : await auth({ ...state,\n    request\n  });\n  endpoint.headers.authorization = \"token \" + token;\n  return request(endpoint);\n}\n\nfunction createOAuthUserAuth(_ref) {\n  let {\n    clientId,\n    clientSecret,\n    clientType = \"oauth-app\",\n    request: request$1 = request.defaults({\n      headers: {\n        \"user-agent\": `octokit-auth-oauth-app.js/${VERSION} ${getUserAgent()}`\n      }\n    }),\n    ...strategyOptions\n  } = _ref;\n  const state = Object.assign({\n    clientType,\n    clientId,\n    clientSecret,\n    strategyOptions,\n    request: request$1\n  }); // @ts-expect-error not worth the extra code needed to appease TS\n\n  return Object.assign(auth.bind(null, state), {\n    // @ts-expect-error not worth the extra code needed to appease TS\n    hook: hook.bind(null, state)\n  });\n}\n\ncreateOAuthUserAuth.VERSION = VERSION;\nexport { createOAuthUserAuth, requiresBasicAuth };","map":{"version":3,"mappings":"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","names":["VERSION","getAuthentication","state","strategyOptions","authentication","exchangeWebFlowCode","clientId","clientSecret","clientType","request","type","tokenType","deviceAuth","createOAuthDeviceAuth","Error","auth","options","invalid","currentAuthentication","Date","expiresAt","refreshToken","hasOwnProperty","method","checkToken","resetToken","token","error","status","message","deleteToken","deleteAuthorization","ROUTES_REQUIRING_BASIC_AUTH","requiresBasicAuth","url","test","hook","route","parameters","endpoint","merge","credentials","btoa","headers","authorization","createOAuthUserAuth","octokitRequest","defaults","getUserAgent","Object","assign","bind"],"sources":["/home/hosainy/documents/oden-project/repos/sas-interview-assignment/node_modules/@octokit/auth-oauth-user/dist-src/version.js","/home/hosainy/documents/oden-project/repos/sas-interview-assignment/node_modules/@octokit/auth-oauth-user/dist-src/get-authentication.js","/home/hosainy/documents/oden-project/repos/sas-interview-assignment/node_modules/@octokit/auth-oauth-user/dist-src/auth.js","/home/hosainy/documents/oden-project/repos/sas-interview-assignment/node_modules/@octokit/auth-oauth-user/dist-src/requires-basic-auth.js","/home/hosainy/documents/oden-project/repos/sas-interview-assignment/node_modules/@octokit/auth-oauth-user/dist-src/hook.js","/home/hosainy/documents/oden-project/repos/sas-interview-assignment/node_modules/@octokit/auth-oauth-user/dist-src/index.js"],"sourcesContent":["export const VERSION = \"2.0.1\";\n","// @ts-nocheck there is only place for one of us in this file. And it's not you, TS\nimport { createOAuthDeviceAuth } from \"@octokit/auth-oauth-device\";\nimport { exchangeWebFlowCode } from \"@octokit/oauth-methods\";\nexport async function getAuthentication(state) {\n    // handle code exchange form OAuth Web Flow\n    if (\"code\" in state.strategyOptions) {\n        const { authentication } = await exchangeWebFlowCode({\n            clientId: state.clientId,\n            clientSecret: state.clientSecret,\n            clientType: state.clientType,\n            ...state.strategyOptions,\n            request: state.request,\n        });\n        return {\n            type: \"token\",\n            tokenType: \"oauth\",\n            ...authentication,\n        };\n    }\n    // handle OAuth device flow\n    if (\"onVerification\" in state.strategyOptions) {\n        const deviceAuth = createOAuthDeviceAuth({\n            clientType: state.clientType,\n            clientId: state.clientId,\n            ...state.strategyOptions,\n            request: state.request,\n        });\n        const authentication = await deviceAuth({\n            type: \"oauth\",\n        });\n        return {\n            clientSecret: state.clientSecret,\n            ...authentication,\n        };\n    }\n    // use existing authentication\n    if (\"token\" in state.strategyOptions) {\n        return {\n            type: \"token\",\n            tokenType: \"oauth\",\n            clientId: state.clientId,\n            clientSecret: state.clientSecret,\n            clientType: state.clientType,\n            ...state.strategyOptions,\n        };\n    }\n    throw new Error(\"[@octokit/auth-oauth-user] Invalid strategy options\");\n}\n","import { getAuthentication } from \"./get-authentication\";\nimport { checkToken, deleteAuthorization, deleteToken, refreshToken, resetToken, } from \"@octokit/oauth-methods\";\nexport async function auth(state, options = {}) {\n    if (!state.authentication) {\n        // This is what TS makes us do ¯\\_(ツ)_/¯\n        state.authentication =\n            state.clientType === \"oauth-app\"\n                ? await getAuthentication(state)\n                : await getAuthentication(state);\n    }\n    if (state.authentication.invalid) {\n        throw new Error(\"[@octokit/auth-oauth-user] Token is invalid\");\n    }\n    const currentAuthentication = state.authentication;\n    // (auto) refresh for user-to-server tokens\n    if (\"expiresAt\" in currentAuthentication) {\n        if (options.type === \"refresh\" ||\n            new Date(currentAuthentication.expiresAt) < new Date()) {\n            const { authentication } = await refreshToken({\n                clientType: \"github-app\",\n                clientId: state.clientId,\n                clientSecret: state.clientSecret,\n                refreshToken: currentAuthentication.refreshToken,\n                request: state.request,\n            });\n            state.authentication = {\n                tokenType: \"oauth\",\n                type: \"token\",\n                ...authentication,\n            };\n        }\n    }\n    // throw error for invalid refresh call\n    if (options.type === \"refresh\") {\n        if (state.clientType === \"oauth-app\") {\n            throw new Error(\"[@octokit/auth-oauth-user] OAuth Apps do not support expiring tokens\");\n        }\n        if (!currentAuthentication.hasOwnProperty(\"expiresAt\")) {\n            throw new Error(\"[@octokit/auth-oauth-user] Refresh token missing\");\n        }\n    }\n    // check or reset token\n    if (options.type === \"check\" || options.type === \"reset\") {\n        const method = options.type === \"check\" ? checkToken : resetToken;\n        try {\n            const { authentication } = await method({\n                // @ts-expect-error making TS happy would require unnecessary code so no\n                clientType: state.clientType,\n                clientId: state.clientId,\n                clientSecret: state.clientSecret,\n                token: state.authentication.token,\n                request: state.request,\n            });\n            state.authentication = {\n                tokenType: \"oauth\",\n                type: \"token\",\n                // @ts-expect-error TBD\n                ...authentication,\n            };\n            return state.authentication;\n        }\n        catch (error) {\n            // istanbul ignore else\n            if (error.status === 404) {\n                error.message = \"[@octokit/auth-oauth-user] Token is invalid\";\n                // @ts-expect-error TBD\n                state.authentication.invalid = true;\n            }\n            throw error;\n        }\n    }\n    // invalidate\n    if (options.type === \"delete\" || options.type === \"deleteAuthorization\") {\n        const method = options.type === \"delete\" ? deleteToken : deleteAuthorization;\n        try {\n            await method({\n                // @ts-expect-error making TS happy would require unnecessary code so no\n                clientType: state.clientType,\n                clientId: state.clientId,\n                clientSecret: state.clientSecret,\n                token: state.authentication.token,\n                request: state.request,\n            });\n        }\n        catch (error) {\n            // istanbul ignore if\n            if (error.status !== 404)\n                throw error;\n        }\n        state.authentication.invalid = true;\n        return state.authentication;\n    }\n    return state.authentication;\n}\n","/**\n * The following endpoints require an OAuth App to authenticate using its client_id and client_secret.\n *\n * - [`POST /applications/{client_id}/token`](https://docs.github.com/en/rest/reference/apps#check-a-token) - Check a token\n * - [`PATCH /applications/{client_id}/token`](https://docs.github.com/en/rest/reference/apps#reset-a-token) - Reset a token\n * - [`POST /applications/{client_id}/token/scoped`](https://docs.github.com/en/rest/reference/apps#create-a-scoped-access-token) - Create a scoped access token\n * - [`DELETE /applications/{client_id}/token`](https://docs.github.com/en/rest/reference/apps#delete-an-app-token) - Delete an app token\n * - [`DELETE /applications/{client_id}/grant`](https://docs.github.com/en/rest/reference/apps#delete-an-app-authorization) - Delete an app authorization\n *\n * deprecated:\n *\n * - [`GET /applications/{client_id}/tokens/{access_token}`](https://docs.github.com/en/rest/reference/apps#check-an-authorization) - Check an authorization\n * - [`POST /applications/{client_id}/tokens/{access_token}`](https://docs.github.com/en/rest/reference/apps#reset-an-authorization) - Reset an authorization\n * - [`DELETE /applications/{client_id}/tokens/{access_token}`](https://docs.github.com/en/rest/reference/apps#revoke-an-authorization-for-an-application) - Revoke an authorization for an application\n * - [`DELETE /applications/{client_id}/grants/{access_token}`](https://docs.github.com/en/rest/reference/apps#revoke-a-grant-for-an-application) - Revoke a grant for an application\n */\nconst ROUTES_REQUIRING_BASIC_AUTH = /\\/applications\\/[^/]+\\/(token|grant)s?/;\nexport function requiresBasicAuth(url) {\n    return url && ROUTES_REQUIRING_BASIC_AUTH.test(url);\n}\n","import btoa from \"btoa-lite\";\nimport { auth } from \"./auth\";\nimport { requiresBasicAuth } from \"./requires-basic-auth\";\nexport async function hook(state, request, route, parameters = {}) {\n    const endpoint = request.endpoint.merge(route, parameters);\n    // Do not intercept OAuth Web/Device flow request\n    if (/\\/login\\/(oauth\\/access_token|device\\/code)$/.test(endpoint.url)) {\n        return request(endpoint);\n    }\n    if (requiresBasicAuth(endpoint.url)) {\n        const credentials = btoa(`${state.clientId}:${state.clientSecret}`);\n        endpoint.headers.authorization = `basic ${credentials}`;\n        return request(endpoint);\n    }\n    // TS makes us do this ¯\\_(ツ)_/¯\n    const { token } = state.clientType === \"oauth-app\"\n        ? await auth({ ...state, request })\n        : await auth({ ...state, request });\n    endpoint.headers.authorization = \"token \" + token;\n    return request(endpoint);\n}\n","import { getUserAgent } from \"universal-user-agent\";\nimport { request as octokitRequest } from \"@octokit/request\";\nimport { VERSION } from \"./version\";\nimport { auth } from \"./auth\";\nimport { hook } from \"./hook\";\nexport { requiresBasicAuth } from \"./requires-basic-auth\";\nexport function createOAuthUserAuth({ clientId, clientSecret, clientType = \"oauth-app\", request = octokitRequest.defaults({\n    headers: {\n        \"user-agent\": `octokit-auth-oauth-app.js/${VERSION} ${getUserAgent()}`,\n    },\n}), ...strategyOptions }) {\n    const state = Object.assign({\n        clientType,\n        clientId,\n        clientSecret,\n        strategyOptions,\n        request,\n    });\n    // @ts-expect-error not worth the extra code needed to appease TS\n    return Object.assign(auth.bind(null, state), {\n        // @ts-expect-error not worth the extra code needed to appease TS\n        hook: hook.bind(null, state),\n    });\n}\ncreateOAuthUserAuth.VERSION = VERSION;\n"]},"metadata":{},"sourceType":"module"}